
@inject ISelectListService slctSrvc


<script>

    function returnFalse() {
        return false;
    }

</script>

@model COrder




    <div class="container">
        <h1 class="LoginTitle">@Localizer["Order Details"]</h1>
    </div>


<input class="form-control fieldInput" asp-for="Id" hidden/>



    <div class="container">

        <br />
        <div class="row">

        <div class="col-md-4 mb-3">
            <label class="fieldLabel" asp-for="CustomerName"></label>
            <input class="form-control fieldInput" asp-for="CustomerName" />
            <span class="text-danger" asp-validation-for="CustomerName"></span>
        </div>

        <div class="col-md-4 mb-3">
            <label class="fieldLabel" asp-for="RecipientTelephone"></label>
            <input class="form-control fieldInput" asp-for="RecipientTelephone" />
            <span class="text-danger" asp-validation-for="RecipientTelephone"></span>
        </div>

        <div class="col-md-4 mb-3">
            <label class="fieldLabel" asp-for="CreatedDate"></label>
            <input class="form-control fieldInput" asp-for="CreatedDate" />
            <span class="text-danger" asp-validation-for="CreatedDate"></span>
        </div>

        <div class="col-md-4 mb-3">
            <label class="fieldLabel" asp-for="TotalCost"></label>
            <input class="form-control fieldInput" asp-for="TotalCost" />
            <span class="text-danger" asp-validation-for="TotalCost"></span>
        </div>

        <div class="col-md-12 mb-3">
            <label class="fieldLabel" asp-for="RecipientAddress"></label>
            <textarea class="form-control fieldInput" asp-for="RecipientAddress" />
            <span class="text-danger" asp-validation-for="RecipientAddress"></span>
        </div>


        <div class="col-md-12 mb-3">
            <label class="fieldLabel" asp-for="CustomerNotes"></label>
            <textarea class="form-control fieldInput" asp-for="CustomerNotes" />
            <span class="text-danger" asp-validation-for="CustomerNotes"></span>
        </div>




        </div>


    <div class="row">
    <div class="col-md-4 mb-3">
            <label class="fieldLabel" asp-for="DeliveryCost"></label>
            <input class="form-control fieldInput" asp-for="DeliveryCost" />
            <span class="text-danger" asp-validation-for="DeliveryCost"></span>
    </div>    

        <div class="col-md-4 mb-3">
            <label class="fieldLabel" asp-for="Status"></label>
            @(Html.Kendo().DropDownList()
                .Name("Status")
                .BindTo(slctSrvc.OrderStatusSL(2))
                .HtmlAttributes(new { style = "width: 100%" })
                )
            <span class="text-danger" asp-validation-for="Status"></span>
        </div>

    </div>
        <br />
        <br />
        <hr />
        <br />
        <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<COrderItems>()
                .Name("gridSubproductCharacteristics")
                .ToolBar
                (
                toolbar =>
                {
                    @* toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" }); *@

                }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.COrderId).Visible(false);
                    
                columns.ForeignKey(p => p.SubProductId, slctSrvc.SubProductSL()).Editable("returnFalse").Title(" ");

                    columns.Bound(p => p.ItemQuantity).Editable("returnFalse");
                    columns.Bound(p => p.ItemPrice).Editable("returnFalse");
                columns.Bound(p => p.ItemCost).Editable("returnFalse");

                }

                )
                .Mobile(MobileMode.Auto)


                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                

                .DataSource(
                    dataSource => dataSource

                .Ajax()
                
                .PageSize(20)

            .Read(read => read.Action("OrderItems_Read", "Orders")
            .Type(HttpVerbs.Get).Data("additionalData"))

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>


        <br />
        <br />
        <hr />
        <br />



        

    </div>



    <script>

    var grid = $('#gridSubproductCharacteristics').data('kendoGrid');
    grid.dataSource.read();

    </script>

