
@model SubProduct


<form asp-action="Create_SubProduct" id="myForm1" asp-controller="CenterProducts" method="post" enctype='multipart/form-data'>

    <div class="container">
        <h1 class="LoginTitle">@Localizer["Item Details"]</h1>
    </div>
    <hr />

    <input asp-for="ProductId" hidden value="@ViewBag.Id" />


    <div class="container">

        <br />
        <div class="row">

            <div class="col-md-4 mb-3">
                <label class="fieldLabel" asp-for="Price"></label>
                <input type="text" class="form-control fieldInput" style="direction:ltr !important" asp-for="Price" />
                <span class="text-danger" style="direction:ltr !important" asp-validation-for="Price"></span>
            </div>

            <div class="col-md-4 mb-3">
                <label class="fieldLabel" asp-for="Quantity"></label>
                <input type="text" class="form-control fieldInput" style="direction:ltr !important" asp-for="Quantity" />
                <span class="text-danger" style="direction:ltr !important" asp-validation-for="Quantity"></span>
            </div>

        </div>
        <br />
        <br />
        <hr />
        <br />
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<SubproductCharacteristics>()
                                .Name("gridSubproductCharacteristics")
                            .ToolBar
                            (
                            toolbar =>
                            {
                                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });

                            }).HtmlAttributes(new { @class = "myToolBar" })

                            .Columns(columns =>
                            {
                                columns.Bound(p => p.Id).Visible(false);
                                columns.Bound(p => p.SubproductCharacteristicsTranslation[0].Description);
                                columns.Bound(p => p.SubproductCharacteristicsTranslation[1].Description);

                                columns.Command(command =>
                                {
                                    command.Destroy().TemplateId("Temp_Destroy");
                                }).Width(250).Title(" ");
                            }

                            )
                            .Mobile(MobileMode.Auto)


                            .Pageable(pageable => pageable
                            .Refresh(true)
                            .PageSizes(true)
                            .ButtonCount(25)
                            .Responsive(true)
                            .Info(true)
                            .Numeric(true)
                            )
                            .Sortable()
                            .Navigatable()
                            .Resizable(r => r.Columns(true))
                            .Reorderable(r => r.Columns(true))
                            .Filterable(filt =>
                            {
                                filt.Messages(msg => msg.And(Localizer["And"]));
                                filt.Messages(msg => msg.Or(Localizer["Or"]));
                                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                                filt.Messages(msg => msg.Info(""));

                                filt.Operators(op => op.ForDate(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.IsNotEqualTo(Localizer["Equal"]);
                                    fs.IsEqualTo(Localizer["Not Equal"]);
                                    fs.IsLessThan(Localizer["Smaller"]);
                                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                                    fs.IsGreaterThan(Localizer["Greater"]);
                                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                                }
                                )
                                );

                                filt.Operators(op => op.ForString(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.StartsWith(Localizer["Starts with"]);
                                    fs.EndsWith(Localizer["Ends with"]);
                                    fs.Contains(Localizer["Contains"]);
                                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                                    fs.IsEqualTo(Localizer["Equal"]);
                                    fs.DoesNotContain(Localizer["Does not Contain"]);

                                }
                                )
                                );


                                filt.Operators(op => op.ForNumber(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                                    fs.IsEqualTo(Localizer["Equal"]);

                                    fs.IsLessThan(Localizer["Smaller"]);
                                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                                    fs.IsGreaterThan(Localizer["Greater"]);
                                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                                }
                                )
                                );



                            })
                            .Scrollable()
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                            .DataSource(
                            dataSource => dataSource

                            .Ajax()
                            .Batch(true)
                            .PageSize(20)
                            .Model(model => model.Id(p => p.Id))
                

                .Model(model => model.Field(p => p.SubproductCharacteristicsTranslation).DefaultValue(new List<SubproductCharacteristicsTranslation> { new SubproductCharacteristicsTranslation { LangCode = "en-us", Description = "" }, new SubproductCharacteristicsTranslation { LangCode = "ar", Description = "" } }))

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_PatientAllergy", "PatientX");
                })




                .Update(destroy =>
                {
                    destroy.Action("Update_PatientAllergy", "PatientX");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>


        <br />
        <br />
        <hr />
        <br />



        <button type="button" onclick="onDone()" class="form-control addCtrl"> @Localizer["Save"]</button>

    </div>


</form>


