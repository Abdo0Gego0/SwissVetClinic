
@inject ISelectListService slctSrvc

<br />

@{
    double? totlaBills = new ApplicationDbContext().VisistBill.Where(a =>  a.Status == 1).Sum(a => a.ServiceCost + a.MedicnieCost);
    double? cashBills = new ApplicationDbContext().VisistBill.Where(a=>a.PaymentType==0 && a.Status==1).Sum(a => a.ServiceCost + a.MedicnieCost);
    double? onLineBills = new ApplicationDbContext().VisistBill.Where(a => a.PaymentType == 1 && a.Status == 1).Sum(a => a.ServiceCost + a.MedicnieCost);
}

<div class="container">

    <div class="row">


        <div class="col-md-12 mb-3">
            <label class="fieldLabel">@Localizer["TotalIncome"]</label>
            <input disabled class="fieldLabel" value="@totlaBills" />
        </div>

        <div class="col-md-6 mb-3">
            <label class="fieldLabel">@Localizer["CashIncome"]</label>
            <input disabled class="fieldLabel" value="@cashBills" />
        </div>

        <div class="col-md-6 mb-3">
            <label class="fieldLabel">@Localizer["OnlineIncome"]</label>
            <input disabled class="fieldLabel" value="@onLineBills" />
        </div>

    </div>

</div>

<div class="@Localizer["k-rtl"]">
@(
Html.Kendo().Grid<VisistBill>()
        .Name("grid")
        .ToolBar
        (
        toolbar =>
        {
            @*  toolbar.Custom().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl", onclick = "Create_Product()" }); 
            toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
    toolbar.Search().Text(Localizer["Search"]); *@
        }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
            columns.Bound(p => p.Number).Title("#").Width(80);
                    columns.ForeignKey(p => p.PetOwnerId,slctSrvc.PatientsSL());
                    columns.Bound(p => p.ServiceCost);
                    columns.Bound(p => p.MedicnieCost);
            columns.ForeignKey(p => p.PaymentType, slctSrvc.PaymentTypeSL()).Width(95);
            columns.ForeignKey(p => p.Status, slctSrvc.PaymentStatusSL()).Width(95);

                    columns.Command(command =>

                    {
                command.Custom("myDownload").Text(@"<span class='myEditStyle'>
    <i class='fa fa-print'></i>
    </span>").Click("goDownloadDiagnosis");
                        command.Custom("myEdit").Text(@"<span class='myEditStyle'>
    <i class='fa fa-pencil'></i>
    </span>").Click("goEditBill");

                    }).Width(100);
                }

                    )
                .Mobile(MobileMode.Auto)

                        .Editable(ed =>
        {
            ed.Mode(GridEditMode.PopUp); ed.DisplayDeleteConfirmation(true);

            ed.DisplayDeleteConfirmation(Localizer["Do you want to delete this item?"]);


        })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

                .DataSource(
        dataSource => dataSource

        .Ajax()
        @* .Batch(true) *@
        .PageSize(20)
        .Model(model => model.Id(p => p.Id))
        .Read(read => read.Action("Read", "Bills").Type(HttpVerbs.Get))


        .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

        )
        @*.Events(events => events.Edit("onEdit"))*@
        .Events(events => events.DataBound("onDataBound"))
)

</div>
<script>


    function goEditBill(e) {
        dataItemPay = this.dataItem($(e.currentTarget).closest("tr"));
        transferId = dataItemPay.Id;
        var url = "/CenterEmployeeReception/Bills/Edit_Bill/" + transferId;
        var a = document.createElement('a');
        a.href = url;
        a.target = "_blank";
        a.click();
    }


    function goDownloadDiagnosis(e){
        dataItemPay = this.dataItem($(e.currentTarget).closest("tr"));
        transferId = dataItemPay.Id;
        var url = "/Auth/WebNotification/DownloadDiagnosis/" + transferId;
        var a = document.createElement('a');
        a.href = url;
        a.target = "_blank";
        a.click();
    }

</script>


<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>


