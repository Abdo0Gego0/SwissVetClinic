@inject IUserService _userService
@inject ISelectListService slSrvc
@model Pet

@{
    string taskFilesName = Model.Id.ToString().Replace("-", "");
}

@(Html.Kendo().Window()
    .Visible(false)
    .Name("windowPatientFiles")
    .Title(Localizer["Patient Files"])
    .Content(Localizer["loading..."])
    .LoadContentFrom("windowPatientFiles", "Patient", new { area = "Doctor", id = Model.Id })
    .HtmlAttributes(new { @style = "box-shadow:0px 0px 204px 20px" })

    .Draggable()
.Resizable()
.Width(800)
.Actions(actions => actions.Pin().Minimize().Maximize().Close())
    .Resizable()
)



<script>

    function openPatientFiles() {
        $("#windowPatientFiles").data("kendoWindow").open();

    }


    function onOpen(e) {

        var class1 = document.getElementsByClassName('.k-dialog');
        var class2 = document.getElementsByClassName('.k-overlay');

        for (var i = 0; i < class1.length; i += 1) {
            class1[i].style.display = 'block';
        }

        for (var i = 0; i < class2.length; i += 1) {
            class2[i].style.display = 'block';
        }



        if (e.entry.extension == ".png" || e.entry.extension == ".jpg" || e.entry.extension == ".jpeg" || e.entry.extension == ".tif") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }


            $("#imagePreview").attr("src", "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension);
            $("#window").data("kendoWindow").center().open();
        }

        if (e.entry.extension == ".pdf") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }


            var pdfViewer = $("#pdfviewer").data("kendoPDFViewer");
            var fp = "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension;
            pdfViewer.fromFile(fp);
            $("#windowPdf").data("kendoWindow").center().open();

        }

        if (e.entry.extension == ".mp4") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }

            var $video = $('#videoPreview video'),
                videoSrc = $('source', $video).attr('src', "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension);
            $video[0].load();
            $video[0].play();

            $("#windowVideo").data("kendoWindow").center().open();

        }

    }

</script>


<br />
<div class="container">
    <center>
        <h1 class="LoginTitle">@Localizer["ClientAnimals"]</h1>
    </center>
</div>
<br />

<form id="myForm" asp-action="Open_Patient_Pet_Details" method="post" enctype='multipart/form-data' class="k-form k-form-vertical">


<div class="bannerContainer">
    <div class="row" style="width:100%;align-items:center;justify-content:center">
        <input hidden asp-for="PetOwnerId" value="@Model.PetOwnerId"/>
        <input hidden asp-for="Id" value="@Model.Id"/>
        <input hidden asp-for="MedicalCenterId" value="@Model.MedicalCenterId" />
        
        <center>
            @{
                if (!string.IsNullOrEmpty(Model.ImageName))
                {
                    <div onclick="document.getElementById('ImageFile').click()" class="picCircle" id="prevImg" style="cursor:pointer;background-image:url(@Model.ImageFullPath) !important">
                    </div>
                }
                else
                {
                    <div onclick="document.getElementById('ImageFile').click()" class="picCircle" id="prevImg" style="cursor:pointer;">
                    </div>
                }
            }
            <br />
        <br />
        <br />
            <div>
                <span>
                    <i style="background-image:url('/AdminDashboard/images/gallery-export.svg');display: inline-block;width:24px;height:24px"></i>
                    <span class="uploadPicture"
                          onclick="document.getElementById('ImageFile').click()">
                        @Localizer["ChooseImage"]
                    </span>
                </span>
                <input type="file" asp-for="ImageFile" onchange="preview()" accept="image/*" style="display:none">
            </div>
        </center>



    </div>
    <br />
    <br />
    <br />
    <div class="row mb-3">
        <div class="col-md-6 mb-3">
            <label class="fieldLabel" asp-for="PetName"></label>
            <input class="form-control fieldInput" asp-for="PetName" />
            <span class="text-danger" asp-validation-for="PetName"></span>
        </div>
        <div class="col-md-6 mb-3">
            <label class="fieldLabel" asp-for="PetType"></label>
            <input class="form-control fieldInput" asp-for="PetType" />
            <span class="text-danger" asp-validation-for="PetType"></span>
        </div>
        <div class="col-md-6 mb-3">
            <label class="fieldLabel" asp-for="BloodType"></label>
            <input class="form-control fieldInput" asp-for="BloodType" />
            <span class="text-danger" asp-validation-for="BloodType"></span>
        </div>


            <div class="col-md-6 mb-3">
                <label class="fieldLabel" asp-for="LifeStyle"></label>
                <input class="form-control fieldInput" asp-for="LifeStyle" />
                <span class="text-danger" asp-validation-for="LifeStyle"></span>
            </div>

            <div class="col-md-6 mb-3">
                <label class="fieldLabel" asp-for="Breed"></label>
                <input class="form-control fieldInput" asp-for="Breed" />
                <span class="text-danger" asp-validation-for="Breed"></span>
            </div>

            <div class="col-md-6 mb-3">
                <label class="fieldLabel" asp-for="Sex"></label>
                <select asp-for="Sex" asp-items="@slSrvc.SexSL()" class="form-select fieldLabel">
                </select>
                <span class="text-danger" asp-validation-for="Sex"></span>
            </div>

        <div class="col-md-6 mb-3">
            <label style="display:flex" class="dateLabel">@Html.Raw(Localizer["BirthDate"])</label>
            @(Html.Kendo().DateTimePickerFor(m => m.BirthDate).HtmlAttributes(new { @required = true, @class = "fieldInput" }).Format("{0:yyyy-MM-dd HH:mm}"))
        </div>
    </div>
</div>
    <br />

    <button type="submit"  class="form-control addCtrl"> @Localizer["Save"]</button>

</form>

<hr />
<br />


<kendo-expansionpanel name="sub0" title="@Localizer["Patient Old Visits"]" sub-title="" expanded="false">
    <content>

        <div id="teammates" class="widget">
            <div>
                <div class="team-mate" style="cursor:pointer" onclick="openPatientFiles()">
                    <h4>@Localizer["Open patient files"] &nbsp;&nbsp; <i class="fas fa-folder-open"></i></h4>
                </div>

            </div>
        </div>

        <br />
        <br />
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<PatientVisit>()
                .Name("gridVisists")
                .Messages(msg =>
                {
                    msg.NoRecords(Localizer["NoRecords"]);

                })
                .ToolBar
                (
                toolbar =>
                {

                    @*                 toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
            toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
            toolbar.Search().Text(Localizer["Search"]); *@
                }).HtmlAttributes(new { @class = "myToolBar" })


                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.VisistDate);
                    columns.ForeignKey(p => p.BaseClinicId, slSrvc.ClinicsSL()).Title(Localizer["Clinic"]);
                    columns.ForeignKey(p => p.DoctorId, slSrvc.DoctorSL()).Title("Doctor");

                    columns.Command(command =>
                    {
                        command.Custom("myEdit").Text(@"<span class='myEditStyle'>
            <i class='fa fa-eye'></i>
            </span>").Click("openPreviousVisitEmployee");

                    }).Width(250);


                }

                )
                .Mobile(MobileMode.Auto)
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.PopUp).TemplateName("DoctorVisitPopUp");

                    ed.DisplayDeleteConfirmation(false);
                })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true).Messages(pmsg => { pmsg.Refresh(Localizer["Refresh"]); pmsg.ItemsPerPage(Localizer["ItemsPerPage"]); pmsg.Next(Localizer["Next"]); pmsg.Previous(Localizer["Previous"]); })
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("PatientVisit_Read", "Patient", new { area = "Doctor", id = Model.Id }).Type(HttpVerbs.Get))

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_PatientVisit", "Patient");
                })


                .Create(destroy =>
                {
                    destroy.Action("Create_PatientVisit", "Patient", new { id = @Model.Id });
                })

                .Update(destroy =>
                {
                    destroy.Action("Update_PatientVisit", "Patient");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                @*.Events(events => events.Edit("onEdit"))*@
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>
    </content>
</kendo-expansionpanel>

<hr />
<br />

<kendo-expansionpanel name="sub1" title="@Localizer["Patient Allergy"]" sub-title="" expanded="false">

    <content>
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<PatientAllergy>()
                .Name("PatientAllergy")
                .ToolBar
                (
                toolbar =>
                {
                    toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Search().Text(Localizer["Search"]);

                }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.value);

                    columns.Command(command =>
                    {
                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250).Title(" ");
                }

                )
                .Mobile(MobileMode.Auto)
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("PatientAllergy_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))
                .Create(destroy =>
                {
                    destroy.Action("Create_PatientAllergy", "Patient", new { id = @Model.Id });
                })

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_PatientAllergy", "Patient");
                })




                .Update(destroy =>
                {
                    destroy.Action("Update_PatientAllergy", "Patient");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>
    </content>

</kendo-expansionpanel>

<hr />
<br />
<kendo-expansionpanel name="sub2" title="@Localizer["Patient Medical History"]" sub-title="" expanded="false">

    <content>
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<PatientMedicalHistory>()
                .Name("PatientMedicalHistory")
                .ToolBar
                (
                toolbar =>
                {
                    toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Search().Text(Localizer["Search"]);

                }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.value);

                    columns.Command(command =>
                    {
                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250).Title(" ");
                }

                )
                .Mobile(MobileMode.Auto)
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("PatientMedicalHistory_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))
                .Create(destroy =>
                {
                    destroy.Action("Create_PatientMedicalHistory", "Patient", new { id = @Model.Id });
                })

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_PatientMedicalHistory", "Patient");
                })



                .Update(destroy =>
                {
                    destroy.Action("Update_PatientMedicalHistory", "Patient");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>
    </content>
</kendo-expansionpanel>

<hr />
<br />
<kendo-expansionpanel name="sub3" title="@Localizer["Patient Medicine History"]" sub-title="" expanded="false">
    <content>
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<PatientMedicineHistory>()
                .Name("PatientMedicineHistory")
                .ToolBar
                (
                toolbar =>
                {
                    toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Search().Text(Localizer["Search"]);

                }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.value);

                    columns.Command(command =>
                    {
                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250).Title(" ");
                }

                )
                .Mobile(MobileMode.Auto)
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("PatientMedicineHistory_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))
                .Create(destroy =>
                {
                    destroy.Action("Create_PatientMedicineHistory", "Patient", new { id = @Model.Id });
                })
                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_PatientMedicineHistory", "Patient");
                })




                .Update(destroy =>
                {
                    destroy.Action("Update_PatientMedicineHistory", "Patient");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>
    </content>
</kendo-expansionpanel>

<hr />
<br />
<kendo-expansionpanel name="sub4" title="@Localizer["Patient Surgical History"]" sub-title="" expanded="false">

    <content>
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<PatientSurgicalHistory>()
                .Name("PatientSurgicalHistory")
                .ToolBar
                (
                toolbar =>
                {
                    toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Search().Text(Localizer["Search"]);

                }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.value);

                    columns.Command(command =>
                    {
                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250).Title(" ");
                }

                )
                .Mobile(MobileMode.Auto)
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("PatientSurgicalHistory_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))
                .Create(destroy =>
                {
                    destroy.Action("Create_PatientSurgicalHistory", "Patient", new { id = @Model.Id });
                })
                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_PatientSurgicalHistory", "Patient");
                })




                .Update(destroy =>
                {
                    destroy.Action("Update_PatientSurgicalHistory", "Patient");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>
    </content>
</kendo-expansionpanel>

<hr />
<br />



<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>


<script>
    function preview() {
        var file = document.getElementById('ImageFile').files[0];
        document.getElementById('prevImg').style.backgroundImage = "url('" + URL.createObjectURL(file) + "')";
    }
</script>

