@{
    string preferredCulture = ViewBag.PreferredCulture;
}

@inject IUserService _userService;

@{
    double? totlaAmount = new ApplicationDbContext().Outcome.Where(a=>a.EmployeeId==(Guid)_userService.GetMyId()).Sum(a => a.Amount);

}


<br />
<br />
<div class="container">

    <div class="row">


        <div class="col-md-12 mb-3">
            <label class="fieldLabel">@Localizer["TotalOutCome"]</label>
            <input disabled class="fieldLabel" value="@totlaAmount" />
        </div>


    </div>

</div>

<div class="@Localizer["k-rtl"]">
    @(
        Html.Kendo().Grid<Outcome>()
            .Name("grid")
            .Messages(msg =>
            {
                msg.NoRecords(Localizer["NoRecords"]);

            })
            .ToolBar
            (
            toolbar =>
            {
                toolbar.Create().HtmlAttributes(new { @class = "addCtrl" }).Text(Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon");

            }).HtmlAttributes(new { @class = "myToolBar" })
            .Columns(columns =>
            {

                columns.Bound(p => p.Title);
            columns.Bound(p => p.Amount);

                columns.Bound(p=>p.CreateDate);

            columns.Command(command =>
            {
                command.Edit().TemplateId("Temp_Edit");
                command.Destroy().TemplateId("Temp_Destroy");
            }).Width(100).Title(" ");

        }


        )
        .Mobile(MobileMode.Auto)


        .Editable(ed =>
        {
            ed.Mode(GridEditMode.PopUp).TemplateName("OutcomeEditor");

            ed.DisplayDeleteConfirmation(true);
            ed.DisplayDeleteConfirmation(Localizer["Do you want to delete this item?"]);

            ed.Window(wi =>
            {
                wi.Width("80%");
                wi.Modal(true);
                wi.Draggable(true);
                wi.Resizable();
                wi.Scrollable(true);
            });
        })

        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(25)
        .Responsive(true)
        .Info(false)

        .Numeric(true)
        .Messages(pmsg => { pmsg.Refresh(Localizer["Refresh"]); pmsg.ItemsPerPage(Localizer["ItemsPerPage"]); pmsg.Next(Localizer["Next"]); pmsg.Previous(Localizer["Previous"]); })
        )
        .Sortable()
        .Navigatable()
        .Resizable(r => r.Columns(true))
        .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
        .Scrollable()

        .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

        .DataSource(
        dataSource => dataSource
        .Ajax()
        @*.ServerOperation(false)*@
        .PageSize(20)
        .Model(model => model.Id(p => p.Id))
        .Model(model => model.Field(p => p.CreateDate).DefaultValue(DateTime.Now))
        .Model(model => model.Field(p => p.EmployeeId).DefaultValue((Guid)_userService.GetMyId()))
        .Read(read => read.Action("Read", "Outcome").Type(HttpVerbs.Get))
        .Create(create => create.Action("Create", "Outcome"))
        .Update(update => update.Action("Update", "Outcome"))
        .Destroy(destroy =>
        {
            destroy.Action("Destroy", "Outcome");
        })

        .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

        )
        .Events(events => events.Edit("onEditBanner"))

        .Events(events => events.DataBound("onDataBound"))
        )




</div>


<script>



    function onEditBanner(e) {

        e.container.find(".k-grid-update").text("@Html.Raw(Localizer["Save"])");
        e.container.find(".k-grid-cancel").text("@Html.Raw(Localizer["Cancel"])");

        if (!e.model.isNew()) {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["Edit"])");

        }
        else {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["New"])");

        }
    }














    function dirtyField(data, fieldName) {
        if (data.dirty && data.dirtyFields[fieldName]) {
            return "<span class='k-dirty'></span>"
        }
        else {
            return "";
        }
    }






    function returnFalse() {
        return false;
    }



</script>

<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(38,102,238)"><i class="fa fa-pencil"></i></span>
</script>

