<br />
<div class="container">
    <h1 class="LoginTitle">@Localizer["Item Details"]</h1>
</div>
<hr />

<div class="@Localizer["k-rtl"]">
    @(
        Html.Kendo().Grid<SubProduct>()
        .Name("grid")
        .ToolBar
        (
        toolbar =>
        {
            toolbar.Custom().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" ,onclick="openSubProductModal()"});
            @*             toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
    toolbar.Search().Text(Localizer["Search"]); *@
            }).HtmlAttributes(new { @class = "myToolBar" })

                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Id).Visible(false);
                        columns.Bound(p => p.SubProductImage[0].ImageFullPath)
            .ClientTemplate(
        @"<div class='prof-photo'
    style='background-image: url(" + @Url.Content("#: SubProductImage[0] ==null ? '' : SubProductImage[0].ImageFullPath #") + ");'></div>")

            .Width(100)
            .Title(" ").Filterable(false);
                        columns.Bound(p => p.Price).Title(Localizer["Price"]);
                        columns.Bound(p => p.SubproductCharacteristics[0].SubproductCharacteristicsTranslation[0].Description) ;

            columns.Command(command =>
            {
                @* command.Edit().TemplateId("Temp_Edit"); *@
                command.Destroy().TemplateId("Temp_Destroy");
            }).Width(250);
        }

        )
        .Mobile(MobileMode.Auto)

        .Editable(ed =>
        {
            ed.Mode(GridEditMode.PopUp);
            ed.TemplateName("SubProductEditor");
            ed.DisplayDeleteConfirmation(true);
            ed.Window(a => a.Width("80%"));
            ed.DisplayDeleteConfirmation(Localizer["Do you want to delete this item?"]);


        })

        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(25)
        .Responsive(true)
        .Info(true)
        .Numeric(true)
        )
        .Sortable()
        .Navigatable()
        .Resizable(r => r.Columns(true))
        .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
        .Scrollable()


        .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

        .DataSource(
        dataSource => dataSource

        .Ajax()
        @* .Batch(true) *@
        .PageSize(20)
        .Model(model => model.Id(p => p.Id))
        .Model(model => model.Field(p => p.ProductId).DefaultValue(ViewBag.Id))
        .Model(model => model.Field(p => p.SubProductImage).DefaultValue(new List<SubProductImage> { new SubProductImage { ImageName = "" } }))
        .Model(
                model => model.Field(p => p.SubproductCharacteristics).DefaultValue
                (
        new List<SubproductCharacteristics>
    {
    new SubproductCharacteristics
    {
    SubproductCharacteristicsTranslation=new  List<SubproductCharacteristicsTranslation>
    {
    new SubproductCharacteristicsTranslation { LangCode="en-US",Description=""},
    new SubproductCharacteristicsTranslation { LangCode="ar",Description=""},

    }
    }
    }
                )
                )
        .Read(read => read.Action("Read_SubProduct", "CenterProducts", new { id = ViewBag.Id }).Type(HttpVerbs.Get))

        .Destroy(destroy =>
        {
            destroy.Action("Destroy_SubProduct", "CenterProducts");
        })


        .Create(destroy =>
        {
            destroy.Action("Create_Patient", "CenterProducts");
        })

        .Update(destroy =>
        {
            destroy.Action("Edit_Patient", "CenterProducts");
        })

        .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

        )
        .Events(events => events.Edit("onEditCer"))

        .Events(events => events.DataBound("onDataBound"))
        )

</div>




<div id="SubProductEditor" style="display: none;">
    <partial name="_SubProductEditor"></partial>
</div>

<script>

    function openSubProductModal() {
        $("#SubProductEditor").kendoWindow({

            modal: true,
            width: 800,
            height: 800,
            actions: ["Close"]
        }).data("kendoWindow").center().open();
    }




    function goEditProduct() {
        window.location = '@Url.Action("Create_Product", "CenterProducts", new { area = "CenterAdmin" })';
    }

</script>


<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:var(--site-light-pink)"><i class="fas fa-edit"></i></span>
</script>


<script>

    function onEditCer(e) {

        

        e.container.find(".k-grid-update").text("@Html.Raw(Localizer["Save"])");
        e.container.find(".k-grid-cancel").text("@Html.Raw(Localizer["Cancel"])");
        
        e.container.find(".k-grid-update").hide();
        e.container.find(".k-grid-cancel").hide();

        if (!e.model.isNew()) {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["Edit"])");
            
        }
        else {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["New"])");
        }
    }

</script>
