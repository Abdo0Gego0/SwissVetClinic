

<div class="@Localizer["k-rtl"]">
@(
Html.Kendo().Grid<ShiftTable>()
                                        .Name("grid")
        .ToolBar
        (
        toolbar =>
        {

            toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl"});
@*             toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
            toolbar.Search().Text(Localizer["Search"]); *@
        }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.ShiftName);
                    columns.Bound(p => p.DayOfWeek);
                    columns.Bound(p => p.StartTime);
                    columns.Bound(p => p.EndTime)  ;
                    

                    columns.Command(command =>
                    {
                        command.Edit().TemplateId("Temp_Edit");
                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250);
                }

                    )
                .Mobile(MobileMode.Auto)

                        .Editable(ed =>
        {
            ed.Mode(GridEditMode.PopUp).TemplateName("ShiftEditor"); ; ed.DisplayDeleteConfirmation(true);

            ed.DisplayDeleteConfirmation("Do you want to delete this shift?");


        })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

                .DataSource(
        dataSource => dataSource

        .Ajax()
@* .Batch(true) *@
        .PageSize(20)
        .Model(model => model.Id(p => p.Id))
        .Read(read => read.Action("Read_ShiftTable", "Attendance").Type(HttpVerbs.Get))

        .Destroy(destroy =>
        {
            destroy.Action("Destroy_ShiftTable", "Attendance");
        })
        
        .Create(destroy =>
        {
            destroy.Action("Create_ShiftTable", "Attendance");
        }) 

        .Update(destroy =>
        {
            destroy.Action("Update_ShiftTable", "Attendance");
        })

        .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

        )
        .Events(events => events.Edit("onEditCer"))
        .Events(events => events.DataBound("onDataBound"))
)
</div>

<script>

    function onEditCer(e) {
        if (!e.model.isNew()) {

        }
    }

</script>


<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:var(--site-light-pink)"><i class="fas fa-pencil"></i></span>
</script>
