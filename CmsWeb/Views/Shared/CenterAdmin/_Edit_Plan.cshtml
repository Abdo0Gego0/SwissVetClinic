
@model TherapyPlan

@inject ISelectListService slSrvc



<form asp-action="Edit_Plan" asp-controller="TherapyPlan" method="post" id="myForm" enctype='multipart/form-data'>

    <input asp-for="Id" hidden/>
    <input asp-for="MedicalCenterId" hidden/>

    <input asp-for="TherapyPlanTranslations[0].TherapyPlanId" hidden>
    <input asp-for="TherapyPlanTranslations[1].TherapyPlanId" hidden>
    <input asp-for="TherapyPlanTranslations[0].Id" hidden/>
    <input asp-for="TherapyPlanTranslations[1].Id" hidden/>

    <div class="container">

        <center>


            <h1 class="LoginTitle">Plan details</h1>

        </center>

        <br />

        <div class="row">
            <div class="col-md-6">
                <label class="fieldLabel">Name</label>
                <input class="form-control fieldInput" asp-for="TherapyPlanTranslations[0].Description" required />
                <br />
            </div>

            <div class="col-md-6" dir="rtl">
                <label class="fieldLabel" style="margin:0px;" dir="rtl">
                    الاسم
                </label>
                <input class="form-control fieldInput" asp-for="TherapyPlanTranslations[1].Description" required />
                <br />
            </div>
        </div>



        <div class="row">
            <div class="col-md-12">
                <label class="fieldLabel">Session to uplaod patient video</label>
                <input class="form-control fieldInput" asp-for="PatientVideoEveryNumberOfSessions" />
                <br />
            </div>
        </div>



        <br />
        <br />

        <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<TherapyGoals>()
                        .Name("grid")
                        .ToolBar
                        (
                        toolbar =>
                        {
                            toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                            toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
                            toolbar.Search().Text(Localizer["Search"]);
                        }).HtmlAttributes(new { @class = "myToolBar" })

                        .Columns(columns =>
                        {
                            columns.Bound(p => p.Id).Visible(false);
                            columns.Bound(g => g.IsSelected)
                            .Filterable(false)
                            .Width(50).ClientTemplate("<input type='checkbox' #= IsSelected ? checked='checked' : '' # class='chkSelect'/>")
                            .Title(" ");
                            columns.Bound(p => p.TherapyGoalsTranslations[0].Description).Title("Goal");
                            columns.Bound(p => p.TherapyGoalsTranslations[1].Description).Title("الهدف");

                            columns.Command(command =>
                            {
                                command.Destroy().TemplateId("Temp_Destroy");
                            }).Width(250).Title(" ");
                        }

                        )
                        .Mobile(MobileMode.Auto)
                        .Editable(ed =>
                        {
                            ed.Mode(GridEditMode.InCell);

                            ed.DisplayDeleteConfirmation(false);
                        })

                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(25)
                        .Responsive(true)
                        .Info(true)
                        .Numeric(true)
                        )
                        .Sortable()
                        .Navigatable()
                        .Resizable(r => r.Columns(true))
                        .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                        .Scrollable()


                        .HtmlAttributes(new { @class = "custom-grid", @style="height:350px !important" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Model(model => model.Field(p => p.MedicalCenterId))
            .Model(model => model.Field(p => p.TherapyGoalsTranslations).DefaultValue(new List<TherapyGoalsTranslations> { new TherapyGoalsTranslations { LangCode = "en-us", Description = "" }, new TherapyGoalsTranslations { LangCode = "ar", Description = "" } }))
            .Read(read => read.Action("Read", "TherapyPlan", new { planId =Model.Id}).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy", "TherapyPlan");
            })


            .Create(destroy =>
            {
                destroy.Action("Create", "TherapyPlan");
            })

            .Update(destroy =>
            {
                destroy.Action("Update", "TherapyPlan");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>
            <br />
            <br />
            <br />
        <button type="submit" class="form-control addCtrl"> @Localizer["Save"]</button>

    </div>


</form>


<script>
    function preview(evt) {
        var filee = event.target.files[0];
        document.getElementById('prevImg').style.backgroundImage = "url('" + URL.createObjectURL(filee) + "')";
    }
</script>

<script>
    $(document).ready(function () {
        // Handling checkbox selection
        $('#grid').on('click', '.chkSelect', function () {
            var grid = $("#grid").data("kendoGrid");
            var dataItem = grid.dataItem($(this).closest('tr'));
            dataItem.set('IsSelected', this.checked);
        });

        // Function to prepare selected goals for submission
        function prepareSelectedGoals() {
            var selectedGoals = [];
            $('#grid').data('kendoGrid').dataSource.data().forEach(function (dataItem) {
                if (dataItem.IsSelected) {
                    selectedGoals.push(dataItem);
                }
            });
            return selectedGoals;
        }

        // Form submission
        $('#myForm').submit(function (event) {
            var selectedGoals = prepareSelectedGoals();
            debugger;
            // Add selected goals as hidden inputs to the form
            var counter = 0;
            selectedGoals.forEach(function (goal) {
                $('<input>').attr({
                    type: 'hidden',
                    name: 'SelectedGoals[' + counter + '].Id',
                    value: goal.Id
                }).appendTo('#myForm');
                counter = counter + 1;
            });
        });
    });
</script>


<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

