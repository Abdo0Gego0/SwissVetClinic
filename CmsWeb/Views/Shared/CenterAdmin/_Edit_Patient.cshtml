@model PetOwner
@inject ISelectListService slSrvc
@inject IUserService _userService


<center>
    <h3 class="text-danger">@ViewBag.ErrorMessage</h3>
</center>



<center>
    <h4>@Localizer["Client number"]  &nbsp; @Model.GeneralNumber</h4>
</center>

@{
    string taskFilesName = Model.Id.ToString().Replace("-", "");
}

@(Html.Kendo().Window()
    .Visible(false)
    .Name("windowPatientFiles")
    .Title(Localizer["Patient Files"])
    .Content(Localizer["loading..."])
    .LoadContentFrom("windowPatientFiles", "Patient", new { area = "Doctor", id = Model.Id })
    .HtmlAttributes(new { @style = "box-shadow:0px 0px 204px 20px" })

    .Draggable()
.Resizable()
.Width(800)
.Actions(actions => actions.Pin().Minimize().Maximize().Close())
    .Resizable()
)



<script>

    function openPatientFiles() {
        $("#windowPatientFiles").data("kendoWindow").open();

    }


    function onOpen(e) {

        var class1 = document.getElementsByClassName('.k-dialog');
        var class2 = document.getElementsByClassName('.k-overlay');

        for (var i = 0; i < class1.length; i += 1) {
            class1[i].style.display = 'block';
        }

        for (var i = 0; i < class2.length; i += 1) {
            class2[i].style.display = 'block';
        }



        if (e.entry.extension == ".png" || e.entry.extension == ".jpg" || e.entry.extension == ".jpeg" || e.entry.extension == ".tif") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }


            $("#imagePreview").attr("src", "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension);
            $("#window").data("kendoWindow").center().open();
        }

        if (e.entry.extension == ".pdf") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }


            var pdfViewer = $("#pdfviewer").data("kendoPDFViewer");
            var fp = "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension;
            pdfViewer.fromFile(fp);
            $("#windowPdf").data("kendoWindow").center().open();

        }

        if (e.entry.extension == ".mp4") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }

            var $video = $('#videoPreview video'),
                videoSrc = $('source', $video).attr('src', "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension);
            $video[0].load();
            $video[0].play();

            $("#windowVideo").data("kendoWindow").center().open();

        }

    }

</script>



<kendo-expansionpanel name="sub0"
                      title="@Localizer["BasicInfo"]"

sub-title="" expanded="true">
    <content>
<form asp-action="Edit_Patient" asp-controller="Patient" method="post" id="myForm" enctype='multipart/form-data'>

    <div class="container">


        <input asp-for="ImageName" hidden>
        <input asp-for="MedicalCenterId" hidden>
        <input asp-for="Id" hidden>

        <center>

        @{
            if (!string.IsNullOrEmpty(Model.ImageName))
            {
                <div onclick="document.getElementById('ImageFile1').click()" class="picCircle" id="prevImg1" style="cursor:pointer;background-image:url(@Model.ImageFullPath) !important">
                </div>
            }
            else
            {
                <div onclick="document.getElementById('ImageFile1').click()" class="picCircle" id="prevImg1" style="cursor:pointer;">
                </div>
            }
        }

            <div>
                <span>
                    <i style="background-image:url('/AdminDashboard/images/gallery-export.svg');display: inline-block;width:24px;height:24px"></i>
                    <span class="uploadPicture"
                          onclick="document.getElementById('ImageFile1').click()">
                                @Localizer["ChooseImage"]

                    </span>
                </span>
                        <input type="file" id="ImageFile1" onchange="preview1()" accept="image/*" style="display:none" name="ImageFile1">
            </div>
        </center>

    <hr />

        <p class="text-center mb-6">@Localizer["Client Info"]</p>

                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label class="fieldLabel" asp-for="FirstName"></label>
                        <input class="form-control fieldInput" asp-for="FirstName" />
                        <span class="text-danger" asp-validation-for="FirstName"></span>

                    </div>

                    <div class="col-md-4  mb-3">
                        <label class="fieldLabel" asp-for="MiddleName"></label>
                        <input class="form-control fieldInput" asp-for="MiddleName" />
                        <span class="text-danger" asp-validation-for="MiddleName"></span>

                    </div>

                    <div class="col-md-4  mb-3">
                        <label class="fieldLabel" asp-for="LastName"></label>
                        <input class="form-control fieldInput" asp-for="LastName" />
                        <span class="text-danger" asp-validation-for="LastName"></span>

                    </div>

                    <div class="col-md-4  mb-3">
                        <label class="fieldLabel" asp-for="MotherName"></label>
                        <input class="form-control fieldInput" asp-for="MotherName" />
                        <span class="text-danger" asp-validation-for="MotherName"></span>

                    </div>

                    <div class="col-md-4  mb-3">
                        <label class="fieldLabel" asp-for="NationalCardId"></label>
                        <input class="form-control fieldInput" asp-for="NationalCardId" />
                        <span class="text-danger" asp-validation-for="NationalCardId"></span>

                    </div>


                    <div class="col-md-4  mb-3">
                        <label class="fieldLabel" asp-for="Nationality"></label>
                        <input class="form-control fieldInput" asp-for="Nationality" />

                    </div>

                    <div class="col-md-4">
                        <label class="fieldLabel" asp-for="PassportNumber"></label>
                        <input class="form-control fieldInput" asp-for="PassportNumber" />

                    </div>
                    @*             <div class="col-md-4">
                    <div class="form-group">
                    <label class="fieldLabel" asp-for="BloodType"></label>
                    <select required class="form-control" asp-for="BloodType" asp-items="@slSrvc.BloodTypeSL()">
                    <option >---</option>
                    </select>
                    </div>
                    </div> *@

                </div>


        <hr />

                @Html.Hidden("PreviousEmail", Model.PersonEmail)
                @Html.Hidden("PreviousUsername", Model.PersonUserName)

        <p class="text-center mb-6">@Localizer["Account Info"]</p>
        <div class="row">
            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="PersonEmail"></label>
                <input class="form-control fieldInput" asp-for="PersonEmail" />
                <span class="text-danger" asp-validation-for="PersonEmail"></span>
            </div>
            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="PersonPhone"></label>
                <input class="form-control fieldInput" asp-for="PersonPhone" />
                <span class="text-danger" asp-validation-for="PersonPhone"></span>
            </div>

            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="PersonUserName"></label>
                <input class="form-control fieldInput" asp-for="PersonUserName" />
                <span class="text-danger" asp-validation-for="PersonUserName"></span>
            </div>

            <div class="col-md-4  mb-3" style="display:none">
                <label class="fieldLabel" asp-for="Password"></label>
                <input class="form-control fieldInput" asp-for="Password" value="@ViewBag.Password" />
                <span class="text-danger" asp-validation-for="Password"></span>
            </div>

        </div>


        <hr />


            <br />
            <br />
            <br />
        <button type="submit" class="form-control addCtrl"> @Localizer["Edit"]</button>

    </div>


</form>

    </content>

</kendo-expansionpanel>

<script>
    function preview1(evt) {
        var filee = event.target.files[0];
        document.getElementById('prevImg1').style.backgroundImage = "url('" + URL.createObjectURL(filee) + "')";
    }
</script>

<br />

<kendo-expansionpanel name="sub1" title="@Localizer["ClientAnimals"]" sub-title="" expanded="false" >
    <content>
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<Pet>()
                .Name("gridPets")
                .ToolBar
                (
                toolbar =>
                {
                    toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                    @*toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });*@
                    toolbar.Custom().Text(@Localizer["Add new with details"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl", onclick = "Create_Patient_Pet_Details()" });
                    toolbar.Search().Text(Localizer["Search"]);
                }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.ImageName)
                    .ClientTemplate(
                @"<div class='prof-photo'
            style='background-image: url(" + @Url.Content("#:ImageFullPath#") + ");'></div>")

                    .Width(100)
                    .Title(" ").Filterable(false);

                    columns.Bound(p => p.PetName);

                    columns.Command(command =>
                    {
                        command.Custom("myEdit")
                        .Text("<span   style='font-size:24px; cursor: pointer; color: rgb(38,102,238)'><i class='fas fa-edit'></i></span>")
                        .Click("Open_Patient_Pet_Details");

                        command.Edit().TemplateId("Temp_Edit");
                        command.Destroy().TemplateId("Temp_Destroy");
                    })
                    .Width(250).Title(" ");
                }

                )
                .Mobile(MobileMode.Auto)
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.PopUp).TemplateName("PetEditor");
                    ed.DisplayDeleteConfirmation(Localizer["Do you want to delete this item?"]);
                })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid", @style = "height:550px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                @* .Batch(true) *@
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))
                .Model(model => model.Field(p => p.PetOwnerId).DefaultValue(Model.Id))
                .Model(model => model.Field(p => p.MedicalCenterId).DefaultValue(_userService.GetMyCenterIdWeb()))
                .Read(read => read.Action("Pets_Read", "Patient", new { id = Model.Id }).Type(HttpVerbs.Get))

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_Pets", "Patient");
                })


                .Create(destroy =>
                {
                    destroy.Action("Create_Pets", "Patient", new { id = Model.Id });
                })

                .Update(destroy =>
                {
                    destroy.Action("Update_Pets", "Patient");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.Edit("onEditPopUp"))
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>
    </content>

</kendo-expansionpanel>


<br />

<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(38,102,238)"><i class="fa fa-pencil"></i></span>
</script>


<script>


    function Open_Patient_Pet_Details(e) {
        dataItemPay = this.dataItem($(e.currentTarget).closest("tr"));
        transferId = dataItemPay.Id;
        var url = "/CenterAdmin/Patient/Open_Patient_Pet_Details/" + transferId;
        var a = document.createElement('a');
        a.href = url;
        a.target = "_blank";
        a.click();
    }


    function Create_Patient_Pet_Details() {
        var url = "/CenterAdmin/Patient/Create_Patient_Pet_Details/" + '@Model.Id';
        var a = document.createElement('a');
        a.href = url;
        a.target = "_blank";
        a.click();
    }


    function onEditPopUp(e) {

        debugger;

        e.container.find(".k-grid-update").text("@Html.Raw(Localizer["Save"])");
        e.container.find(".k-grid-cancel").text("@Html.Raw(Localizer["Cancel"])");

        if (!e.model.isNew()) {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["Edit"])");
            var prevImg = $('#prevImg12');
            prevImg.css('background-image', 'url(' + e.model.ImageFullPath + ')');
        }
        else {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["New"])");
        }
    }


</script>


