
@model BaseClinic

@inject ISelectListService slSrvc

<form asp-action="Create_Clinic" asp-controller="Clinic" method="post" id="myForm" enctype='multipart/form-data'>

    <div class="container">


        <div class="row" style="width:100%;align-items:center;justify-content:center">

            <center>

            <div onclick="document.getElementById('ImageFile').click()" class="picCircle" id="prevImg" style="cursor:pointer;">
            </div>

                <div>
                    <span>
                        <i class="fa fa-camera"></i>
                        <span class="uploadPicture"
                              onclick="document.getElementById('ImageFile').click()">
                            @Localizer["Choose Clinic Image"]
                        </span>
                    </span>
                    <input type="file" asp-for="ImageFile" onchange="preview()" accept="image/*" style="display:none">
                </div>
            </center>
        </div>



         <div class="col-md-4">
            <div class="form-check">
                <input  asp-for="IsShownOnMobile" class="form-check-input my-checkBox" type="checkbox" />
                <label class="form-check-label fieldLabel" asp-for="IsShownOnMobile"></label>
            </div>
        </div> 

        <br />

        <div dir="rtl">
            <div class="row">
                <div class="col-md-12">
                    <label class="fieldLabel" style="direction:ltr !important">Name</label>
                    <input class="form-control fieldInput" style="direction:ltr !important" asp-for="BaseClinicTranslation[0].Name" required />
                    <br />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label class="fieldLabel" style="direction:ltr !important">Description</label>
                    <input class="form-control fieldInput" style="direction:ltr !important" asp-for="BaseClinicTranslation[0].Description" required />
                    <br />
                </div>
            </div>
        </div>
        <hr />

        <div class="row">
            <div class="col-md-12">
                <div dir="rtl">
                    <label class="fieldLabel" style="margin:0px;" dir="rtl">
                       الاسم
                    </label>
                <input class="form-control fieldInput" asp-for="BaseClinicTranslation[1].Name" required />
                </div>
                <br />
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div dir="rtl">
                    <label class="fieldLabel" style="margin:0px;" dir="rtl">
                        الوصف
                    </label>
                    <input class="form-control fieldInput" asp-for="BaseClinicTranslation[1].Description" required />
                </div>
                <br />
            </div>
        </div>


        <hr />

        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <label class="fieldLabel">@Localizer["Clinic Speciality"]</label>
                    <select required class="form-control" asp-for="ClinicSpecialtyId" asp-items="@slSrvc.ClinicSepcialtySL()">
                        <option selected>@Localizer["Clinic Speciality"]</option>
                    </select>  
                </div>
            </div>
        </div>
        <br />


        <div class="row">
            <div class="col-md-12">
                <label class="fieldLabel" asp-for="RoomNumber"></label>
                <input class="form-control fieldInput" asp-for="RoomNumber" />
                <br />
            </div>
        </div>

@*         <div class="row">
            <div class="col-md-12">
                <label class="fieldLabel">VisitCost</label>
                <input class="form-control fieldInput" asp-for="VisitCost" />
                <br />
            </div>
        </div> *@

        <br />
        <br />

        <div class="@Localizer["k-rtl"]" style="display:none">
        @(
            Html.Kendo().Grid<OpeningHours>()
            .Name("gridHours")
            .ToolBar
            (
            toolbar =>
            {
                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                @* toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" }); *@
            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {


                columns.Bound(p => p.DayOfWeek);
                columns.Bound(p => p.OpeningTime);
                columns.Bound(p => p.ClosingTime);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy"); ;
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.PopUp).TemplateName("OpeningHourEditor"); 
                ed.DisplayDeleteConfirmation(true);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
            .Scrollable()
            

            .HtmlAttributes(new { @class = "custom-grid", @style = "height:450px;" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            @* .Batch(true) *@
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Model(model => model.Field(p => p.ClinicId).DefaultValue(Guid.Empty))
            .Read(read => read.Action("Read_OpeningHours", "ClinicXX").Type(HttpVerbs.Get))
            .Destroy(destroy =>
            {
                destroy.Action("Destroy_OpeningHours", "ClinicXX");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_OpeningHoursXX", "Clinic");
            })

            .Update(destroy =>
            {
                destroy.Action("Update_OpeningHours", "ClinicXX");
            })
            .ServerOperation(false)

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>

            <br />
            <br />
            <br />
        <button type="button" onclick="onDone()" class="form-control addCtrl"> Save</button>

    </div>


</form>


<script>
    function preview(evt) {
        var filee = event.target.files[0];
        document.getElementById('prevImg').style.backgroundImage = "url('" + URL.createObjectURL(filee) + "')";
    }
</script>

<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script>

    function onDone() {
        var validator = $("#myForm").kendoValidator().data("kendoValidator");

        var grid = $("#gridHours").data("kendoGrid");

        var f = document.getElementById("myForm");


        var gridData = grid.dataSource.data();
        var formData = [];

        debugger;

        for (var i = 0; i < gridData.length; i++) {

            var inputItemName = document.createElement("input");
            inputItemName.type = "hidden";
            inputItemName.name = "OpeningHours[" + i + "].DayOfWeek";
            inputItemName.value = gridData[i].DayOfWeek;
            f.appendChild(inputItemName);

            var inputItemPrice = document.createElement("input");
            inputItemPrice.type = "hidden";
            inputItemPrice.name = "OpeningHours[" + i + "].OpeningTime";
            inputItemPrice.value = gridData[i].OpeningTime;
            f.appendChild(inputItemPrice);

            var inputItemCount = document.createElement("input");
            inputItemCount.type = "hidden";
            inputItemCount.name = "OpeningHours[" + i + "].ClosingTime";
            inputItemCount.value = gridData[i].ClosingTime;
            f.appendChild(inputItemCount);

            // var inputItemDescription = document.createElement("input");
            // inputItemDescription.type = "hidden";
            // inputItemDescription.name = "OpeningHours[" + i + "].ItemDescription";
            // inputItemDescription.value = gridData[i].ItemDescription;
            // f.appendChild(inputItemDescription);

            debugger;

        }




        if (validator.validate()) {
            $("#myForm").submit();
        }
    }
</script>