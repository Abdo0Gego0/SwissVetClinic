
@model SubProduct


<form asp-action="Create_SubProduct" id="myForm1" asp-controller="CenterProducts" method="post" enctype='multipart/form-data'>

    <div class="container">
        <h1 class="LoginTitle">@Localizer["Item Details"]</h1>
    </div>
    <hr />

    <input asp-for="ProductId" hidden value="@ViewBag.Id" />


    <div class="demo-section k-content wide">
        <div class="wrapper">
            <div id="products"></div>
            <div class="dropZoneElement">
                <div class="textWrapper">
                    <p><span>+</span>Add Image</p>
                    <p class="dropImageHereText">Drop image here to upload</p>
                </div>
            </div>
        </div>
    </div>

    <script type="text/x-kendo-template" id="template">
        <div class="product">
            <img src="../shared/web/foods/#= name #" alt="#: name # image" />
        </div>
    </script>
   
    @(Html.Kendo().Upload()
        .Name("files")
        .Events(e => e.Select("onSelect").Remove("onRemove"))
        .ShowFileList(true)
        .DropZone(".dropZoneElement")
        .Validation(validation =>
        {
            validation.AllowedExtensions(new string[] { ".jpg", ".jpeg", ".png", ".bmp", ".gif" });
            validation.MinFileSize(500);
        })
        )

    <div class="container">

        <br />
        <div class="row">

            <div class="col-md-4 mb-3">
                <label class="fieldLabel" asp-for="Price"></label>
                <input type="number" class="form-control fieldInput" style="direction:ltr !important" asp-for="Price" />
                <span class="text-danger" style="direction:ltr !important" asp-validation-for="Price"></span>
            </div>

            <div class="col-md-4 mb-3">
                <label class="fieldLabel" asp-for="Quantity"></label>
                <input type="number" class="form-control fieldInput" style="direction:ltr !important" asp-for="Quantity" />
                <span class="text-danger" style="direction:ltr !important" asp-validation-for="Quantity"></span>
            </div>

        </div>
        <br />
        <br />
        <hr />
        <br />
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<SubproductCharacteristics>()
                                .Name("gridSubproductCharacteristics")
                            .ToolBar
                            (
                            toolbar =>
                            {
                                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });

                            }).HtmlAttributes(new { @class = "myToolBar" })

                            .Columns(columns =>
                            {
                                columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.SubproductCharacteristicsTranslation[0].Description).Title("Description");
                    columns.Bound(p => p.SubproductCharacteristicsTranslation[1].Description).Title("الوصف");

                                columns.Command(command =>
                                {
                                    command.Destroy().TemplateId("Temp_Destroy");
                                }).Width(250).Title(" ");
                            }

                            )
                            .Mobile(MobileMode.Auto)


                            .Pageable(pageable => pageable
                            .Refresh(true)
                            .PageSizes(true)
                            .ButtonCount(25)
                            .Responsive(true)
                            .Info(true)
                            .Numeric(true)
                            )
                            .Sortable()
                            .Navigatable()
                            .Resizable(r => r.Columns(true))
                            .Reorderable(r => r.Columns(true))
                            .Filterable(filt =>
                            {
                                filt.Messages(msg => msg.And(Localizer["And"]));
                                filt.Messages(msg => msg.Or(Localizer["Or"]));
                                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                                filt.Messages(msg => msg.Info(""));

                                filt.Operators(op => op.ForDate(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.IsNotEqualTo(Localizer["Equal"]);
                                    fs.IsEqualTo(Localizer["Not Equal"]);
                                    fs.IsLessThan(Localizer["Smaller"]);
                                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                                    fs.IsGreaterThan(Localizer["Greater"]);
                                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                                }
                                )
                                );

                                filt.Operators(op => op.ForString(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.StartsWith(Localizer["Starts with"]);
                                    fs.EndsWith(Localizer["Ends with"]);
                                    fs.Contains(Localizer["Contains"]);
                                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                                    fs.IsEqualTo(Localizer["Equal"]);
                                    fs.DoesNotContain(Localizer["Does not Contain"]);

                                }
                                )
                                );


                                filt.Operators(op => op.ForNumber(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                                    fs.IsEqualTo(Localizer["Equal"]);

                                    fs.IsLessThan(Localizer["Smaller"]);
                                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                                    fs.IsGreaterThan(Localizer["Greater"]);
                                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                                }
                                )
                                );



                            })
                            .Scrollable()
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                            .DataSource(
                            dataSource => dataSource

                            .Ajax()
                            .Batch(true)
                            .PageSize(20)
                            .Model(model => model.Id(p => p.Id))
                

                .Model(model => model.Field(p => p.SubproductCharacteristicsTranslation).DefaultValue(new List<SubproductCharacteristicsTranslation> { new SubproductCharacteristicsTranslation { LangCode = "en-us", Description = "" }, new SubproductCharacteristicsTranslation { LangCode = "ar", Description = "" } }))

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_PatientAllergy", "PatientX");
                })




                .Update(destroy =>
                {
                    destroy.Action("Update_PatientAllergy", "PatientX");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>


        <br />
        <br />
        <hr />
        <br />



        <button type="button" onclick="onDone()" class="form-control addCtrl"> @Localizer["Save"]</button>

    </div>


</form>

<script>

    function onDone() {
        var validator = $("#myForm1").kendoValidator().data("kendoValidator");

        var grid = $("#gridSubproductCharacteristics").data("kendoGrid");

        var f = document.getElementById("myForm1");


        var gridData = grid.dataSource.data();
        var formData = [];

        debugger;

        for (var i = 0; i < gridData.length; i++) {

            var inputItemName = document.createElement("input");
            inputItemName.type = "hidden";
            inputItemName.name = "SubproductCharacteristics[" + i + "].SubproductCharacteristicsTranslation[0].Description";
            inputItemName.value = gridData[i].SubproductCharacteristicsTranslation[0].Description;
            f.appendChild(inputItemName);


            var inputItemName1 = document.createElement("input");
            inputItemName1.type = "hidden";
            inputItemName1.name = "SubproductCharacteristics[" + i + "].SubproductCharacteristicsTranslation[0].LangCode";
            inputItemName1.value = "en-US";
            f.appendChild(inputItemName1);


            var inputItemPrice = document.createElement("input");
            inputItemPrice.type = "hidden";
            inputItemPrice.name = "SubproductCharacteristics[" + i + "].SubproductCharacteristicsTranslation[1].Description";
            inputItemPrice.value = gridData[i].SubproductCharacteristicsTranslation[1].Description;
            f.appendChild(inputItemPrice);


            var inputItemPrice1 = document.createElement("input");
            inputItemPrice1.type = "hidden";
            inputItemPrice1.name = "SubproductCharacteristics[" + i + "].SubproductCharacteristicsTranslation[1].LangCode";
            inputItemPrice1.value = "ar";
            f.appendChild(inputItemPrice1);



            debugger;

        }

        if (validator.validate()) {
            $("#myForm1").submit();
        }
    }


</script>


<script>
    $(document).ready(function () {
         var template = kendo.template($("#template").html());
        // var initialFiles = [{ name: "1.jpg" }, { name: "2.jpg" }, { name: "3.jpg" }, { name: "4.jpg" }, { name: "5.jpg" }, { name: "6.jpg" }];

        // $("#products").html(kendo.render(template, initialFiles));
    });

    function onSelect(e) {
        // if (e.operation == "upload") 
        {
            for (var i = 0; i < e.files.length; i++) {
                var file = e.files[i].rawFile;
                var uid = e.files[i].uid;
                if (file) {
                    var reader = new FileReader();

                    reader.onloadend = function () {
                        $("<div class='product' id=" + uid + " ><img src=" + this.result + "  /></div>").appendTo($("#products"));
                    };

                    reader.readAsDataURL(file);
                }
            }
        }
    }

    function onRemove(e) {
        debugger;
        $("#" + e.files[0].uid).remove();
    }




</script>
<style>
    .dropZoneElement {
        position: relative;
        display: inline-block;
        background-color: #f8f8f8;
        border: 1px solid #c7c7c7;
        width: 230px;
        height: 110px;
        text-align: center;
    }

    .textWrapper {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 100%;
        font-size: 24px;
        line-height: 1.2em;
        font-family: Arial,Helvetica,sans-serif;
        color: #000;
    }

    .dropImageHereText {
        color: #c7c7c7;
        text-transform: uppercase;
        font-size: 12px;
    }

    .product {
        float: left;
        position: relative;
        margin: 0 10px 10px 0;
        padding: 0;
    }

        .product img {
            width: 110px;
            height: 110px;
        }

    .wrapper:after {
        content: ".";
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
    }
</style>