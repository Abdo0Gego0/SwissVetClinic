@inject IUserService _userService
@model Pet


<br />
<div class="container">
    <center>
        <h1 class="LoginTitle">@Localizer["ClientAnimals"]</h1>
    </center>
</div>
<br />

<form id="myForm" asp-action="Create_Patient_Pet_Details" method="post" enctype='multipart/form-data' class="k-form k-form-vertical">


<div class="bannerContainer">
    <div class="row" style="width:100%;align-items:center;justify-content:center">
        <input hidden asp-for="PetOwnerId" value="@ViewBag.Id"/>
        <input hidden asp-for="MedicalCenterId" value="@_userService.GetMyCenterIdWeb()" />
        <div onclick="document.getElementById('ImageFile').click()" class="picCircle" id="prevImg" style="cursor:pointer; "></div>
        <br />
        <br />
        <br />
        <center>
            <div>
                <span>
                    <i style="background-image:url('/AdminDashboard/images/gallery-export.svg');display: inline-block;width:24px;height:24px"></i>
                    <span class="uploadPicture"
                          onclick="document.getElementById('ImageFile').click()">
                        @Localizer["ChooseImage"]
                    </span>
                </span>
                <input type="file" asp-for="ImageFile" onchange="preview()" accept="image/*" style="display:none">
            </div>
        </center>
    </div>
    <br />
    <br />
    <br />
    <div class="row mb-3">
        <div class="col-md-6 mb-3">
            <label class="fieldLabel" asp-for="PetName"></label>
            <input class="form-control fieldInput" asp-for="PetName" />
            <span class="text-danger" asp-validation-for="PetName"></span>
        </div>
        <div class="col-md-6 mb-3">
            <label class="fieldLabel" asp-for="PetType"></label>
            <input class="form-control fieldInput" asp-for="PetType" />
            <span class="text-danger" asp-validation-for="PetType"></span>
        </div>
        <div class="col-md-6 mb-3">
            <label class="fieldLabel" asp-for="BloodType"></label>
            <input class="form-control fieldInput" asp-for="BloodType" />
            <span class="text-danger" asp-validation-for="BloodType"></span>
        </div>


            <div class="col-md-6 mb-3">
                <label class="fieldLabel" asp-for="LifeStyle"></label>
                <input class="form-control fieldInput" asp-for="LifeStyle" />
                <span class="text-danger" asp-validation-for="LifeStyle"></span>
            </div>

            <div class="col-md-6 mb-3">
                <label class="fieldLabel" asp-for="Breed"></label>
                <input class="form-control fieldInput" asp-for="Breed" />
                <span class="text-danger" asp-validation-for="Breed"></span>
            </div>

        <div class="col-md-6 mb-3">
            <label style="display:flex" class="dateLabel">@Html.Raw(Localizer["BirthDate"])</label>
            @(Html.Kendo().DateTimePickerFor(m => m.BirthDate).HtmlAttributes(new { @required = true, @class = "fieldInput" }).Format("{0:yyyy-MM-dd HH:mm}"))
        </div>
    </div>
</div>

<hr />
<br />

<content>
    <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientAllergy>()
                .Name("PatientAllergy")
            .ToolBar
            (
            toolbar =>
            {
                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });

            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
            .Filterable(filt =>
            {
                filt.Messages(msg => msg.And(Localizer["And"]));
                filt.Messages(msg => msg.Or(Localizer["Or"]));
                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                filt.Messages(msg => msg.Info(""));

                filt.Operators(op => op.ForDate(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Equal"]);
                    fs.IsEqualTo(Localizer["Not Equal"]);
                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                }
                )
                );

                filt.Operators(op => op.ForString(
                fs =>
                {
                    fs.Clear();
                    fs.StartsWith(Localizer["Starts with"]);
                    fs.EndsWith(Localizer["Ends with"]);
                    fs.Contains(Localizer["Contains"]);
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);
                    fs.DoesNotContain(Localizer["Does not Contain"]);

                }
                )
                );


                filt.Operators(op => op.ForNumber(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);

                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                }
                )
                );



            })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientAllergy", "Patient");
            })




            .Update(destroy =>
            {
                destroy.Action("Update_PatientAllergy", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            .Events(events => events.DataBound("onDataBound"))
            )
    </div>
</content>


<br />

<content>
    <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientMedicalHistory>()
            .Name("PatientMedicalHistory")
            .ToolBar
            (
            toolbar =>
            {

                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });

            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
            .Filterable(filt =>
            {
                filt.Messages(msg => msg.And(Localizer["And"]));
                filt.Messages(msg => msg.Or(Localizer["Or"]));
                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                filt.Messages(msg => msg.Info(""));

                filt.Operators(op => op.ForDate(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Equal"]);
                    fs.IsEqualTo(Localizer["Not Equal"]);
                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                }
                )
                );

                filt.Operators(op => op.ForString(
                fs =>
                {
                    fs.Clear();
                    fs.StartsWith(Localizer["Starts with"]);
                    fs.EndsWith(Localizer["Ends with"]);
                    fs.Contains(Localizer["Contains"]);
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);
                    fs.DoesNotContain(Localizer["Does not Contain"]);

                }
                )
                );


                filt.Operators(op => op.ForNumber(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);

                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                }
                )
                );



            })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientMedicalHistory", "Patient");
            })



            .Update(destroy =>
            {
                destroy.Action("Update_PatientMedicalHistory", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            .Events(events => events.DataBound("onDataBound"))
            )
    </div>
</content>

<br />

<content>
    <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientMedicineHistory>()
            .Name("PatientMedicineHistory")
            .ToolBar
            (
            toolbar =>
            {

                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });

            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
            .Filterable(filt =>
            {
                filt.Messages(msg => msg.And(Localizer["And"]));
                filt.Messages(msg => msg.Or(Localizer["Or"]));
                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                filt.Messages(msg => msg.Info(""));

                filt.Operators(op => op.ForDate(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Equal"]);
                    fs.IsEqualTo(Localizer["Not Equal"]);
                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                }
                )
                );

                filt.Operators(op => op.ForString(
                fs =>
                {
                    fs.Clear();
                    fs.StartsWith(Localizer["Starts with"]);
                    fs.EndsWith(Localizer["Ends with"]);
                    fs.Contains(Localizer["Contains"]);
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);
                    fs.DoesNotContain(Localizer["Does not Contain"]);

                }
                )
                );


                filt.Operators(op => op.ForNumber(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);

                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                }
                )
                );



            })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientMedicineHistory", "Patient");
            })




            .Update(destroy =>
            {
                destroy.Action("Update_PatientMedicineHistory", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            .Events(events => events.DataBound("onDataBound"))
            )
    </div>
</content>

    <br />

<content>
    <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientSurgicalHistory>()
            .Name("PatientSurgicalHistory")
            .ToolBar
            (
            toolbar =>
            {

                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });

            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
            .Filterable(filt =>
            {
                filt.Messages(msg => msg.And(Localizer["And"]));
                filt.Messages(msg => msg.Or(Localizer["Or"]));
                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                filt.Messages(msg => msg.Info(""));

                filt.Operators(op => op.ForDate(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Equal"]);
                    fs.IsEqualTo(Localizer["Not Equal"]);
                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                }
                )
                );

                filt.Operators(op => op.ForString(
                fs =>
                {
                    fs.Clear();
                    fs.StartsWith(Localizer["Starts with"]);
                    fs.EndsWith(Localizer["Ends with"]);
                    fs.Contains(Localizer["Contains"]);
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);
                    fs.DoesNotContain(Localizer["Does not Contain"]);

                }
                )
                );


                filt.Operators(op => op.ForNumber(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);

                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                }
                )
                );



            })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientSurgicalHistory", "Patient");
            })


    

            .Update(destroy =>
            {
                destroy.Action("Update_PatientSurgicalHistory", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            .Events(events => events.DataBound("onDataBound"))
            )
    </div>
</content>

    <br />
    <br />
    <br />
    <hr />

<button type="button" onclick="onDone()" class="form-control addCtrl"> @Localizer["Save"]</button>

</form>

<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>


<script>

    function preview() {
        var file = document.getElementById('ImageFile').files[0];
        document.getElementById('prevImg').style.backgroundImage = "url('" + URL.createObjectURL(file) + "')";
    }

</script>




<script>


    function onDone() {

        var validator = $("#myForm").kendoValidator().data("kendoValidator");
        var f = document.getElementById("myForm");

        var grid = $("#PatientAllergy").data("kendoGrid");
        var gridData = grid.dataSource.data();
        for (var i = 0; i < gridData.length; i++) {
            var inputItemName = document.createElement("input");
            inputItemName.type = "hidden";
            inputItemName.name = "PatientAllergy[" + i + "].value";
            inputItemName.value = gridData[i].value;
            f.appendChild(inputItemName);
            debugger;
        }

        grid = $("#PatientMedicalHistory").data("kendoGrid");
        gridData = grid.dataSource.data();
        for (var i = 0; i < gridData.length; i++) {
            var inputItemName = document.createElement("input");
            inputItemName.type = "hidden";
            inputItemName.name = "PatientMedicalHistory[" + i + "].value";
            inputItemName.value = gridData[i].value;
            f.appendChild(inputItemName);
            debugger;
        }

        grid = $("#PatientMedicineHistory").data("kendoGrid");
        gridData = grid.dataSource.data();
        for (var i = 0; i < gridData.length; i++) {
            var inputItemName = document.createElement("input");
            inputItemName.type = "hidden";
            inputItemName.name = "PatientMedicineHistory[" + i + "].value";
            inputItemName.value = gridData[i].value;
            f.appendChild(inputItemName);
            debugger;
        }

        grid = $("#PatientSurgicalHistory").data("kendoGrid");
        gridData = grid.dataSource.data();
        for (var i = 0; i < gridData.length; i++) {
            var inputItemName = document.createElement("input");
            inputItemName.type = "hidden";
            inputItemName.name = "PatientSurgicalHistory[" + i + "].value";
            inputItemName.value = gridData[i].value;
            f.appendChild(inputItemName);
            debugger;
        }

        if (validator.validate()) {
            $("#myForm").submit();
        }
    }
</script>