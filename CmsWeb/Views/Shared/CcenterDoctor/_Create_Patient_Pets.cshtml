@inject IUserService _userService

<br />
<div class="container">
    <center>
        <h1 class="LoginTitle">@Localizer["ClientAnimals"]</h1>
    </center>
</div>
<br />

<content>
    <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<Pet>()
            .Name("gridPets")
            .ToolBar
            (
            toolbar =>
            {

                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
               @*toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });*@
                toolbar.Custom().Text(@Localizer["Add new with details"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl", onclick = "Create_Patient_Pet_Details()" });
                toolbar.Search().Text(Localizer["Search"]);
            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.ImageName)
                .ClientTemplate(
            @"<div class='prof-photo'
        style='background-image: url(" + @Url.Content("#:ImageFullPath#") + ");'></div>")

                .Width(100)
                .Title(" ").Filterable(false);

                columns.Bound(p => p.PetName);

                columns.Command(command =>
                {
                    command.Edit().TemplateId("Temp_Edit");
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }
            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.PopUp).TemplateName("PetEditor");

                ed.DisplayDeleteConfirmation(Localizer["Do you want to delete this item?"]);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
            .Filterable(filt =>
            {
                filt.Messages(msg => msg.And(Localizer["And"]));
                filt.Messages(msg => msg.Or(Localizer["Or"]));
                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                filt.Messages(msg => msg.Info(""));

                filt.Operators(op => op.ForDate(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Equal"]);
                    fs.IsEqualTo(Localizer["Not Equal"]);
                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                }
                )
                );

                filt.Operators(op => op.ForString(
                fs =>
                {
                    fs.Clear();
                    fs.StartsWith(Localizer["Starts with"]);
                    fs.EndsWith(Localizer["Ends with"]);
                    fs.Contains(Localizer["Contains"]);
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);
                    fs.DoesNotContain(Localizer["Does not Contain"]);

                }
                )
                );


                filt.Operators(op => op.ForNumber(
                fs =>
                {
                    fs.Clear();
                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                    fs.IsEqualTo(Localizer["Equal"]);

                    fs.IsLessThan(Localizer["Smaller"]);
                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                    fs.IsGreaterThan(Localizer["Greater"]);
                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                }
                )
                );



            })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            @* .Batch(true) *@
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Model(model => model.Field(p => p.PetOwnerId).DefaultValue(@ViewBag.Id))
            .Model(model => model.Field(p => p.MedicalCenterId).DefaultValue(_userService.GetMyCenterIdWeb()))
            .Read(read => read.Action("Pets_Read", "Patient", new { id = @ViewBag.Id }).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_Pets", "Patient");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_Pets", "Patient", new { id = @ViewBag.Id });
            })

            .Update(destroy =>
            {
                destroy.Action("Update_Pets", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            .Events(events => events.Edit("onEditPopUp"))
            .Events(events => events.DataBound("onDataBound"))
            )
    </div>
</content>





<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>


<script>

    function Create_Patient_Pet_Details() {
        var url = "/CenterEmployeeReception/Patient/Create_Patient_Pet_Details/" + '@ViewBag.Id';
        var a = document.createElement('a');
        a.href = url;
        a.target = "_blank";
        a.click();
    }



    function onEditPopUp(e) {
        e.container.find(".k-grid-update").text("@Html.Raw(Localizer["Save"])");
        e.container.find(".k-grid-cancel").text("@Html.Raw(Localizer["Cancel"])");

        if (!e.model.isNew()) {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["Edit"])");
        }
        else {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["New"])");
        }
    }
</script>
