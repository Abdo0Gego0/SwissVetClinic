

<form asp-action="Edit_Medicine" id="myForm3" asp-controller="CenterMedicine" method="post" enctype='multipart/form-data'>


    <input name="Id__" id="Id__" hidden />


    <div class="container">

        <br />
        <div class="row">

            <div class="col-md-4 mb-3">
                <label class="fieldLabel">@Localizer["Name_"]</label>
                <input type="text" class="form-control fieldInput" style="direction:ltr !important" name="Name_" id="Name_" />
            </div>

        </div>

        <hr />
        <br />
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<CenterMedicineUnit>()
                .Name("gridCenterMedicineUnit1")
                            .ToolBar
                            (
                            toolbar =>
                            {
                                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                                toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
                                toolbar.Search().Text(Localizer["Search"]);

                            }).HtmlAttributes(new { @class = "myToolBar" })

                            .Columns(columns =>
                            {
                                columns.Bound(p => p.Id).Visible(false);
                                columns.Bound(p => p.SmallestDose);
                                columns.Bound(p => p.PricePerDose);

                                columns.Command(command =>
                                {
                                    command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(80).Title(" ");

                            }

                            )
                            .Mobile(MobileMode.Auto)


                            .Pageable(pageable => pageable
                            .Refresh(true)
                            .PageSizes(true)
                            .ButtonCount(25)
                            .Responsive(true)
                            .Info(true)
                            .Numeric(true)
                            )
                            .Sortable()
                            .Navigatable()
                            .Resizable(r => r.Columns(true))
                            .Reorderable(r => r.Columns(true))
                            .Filterable(filt =>
                            {
                                filt.Messages(msg => msg.And(Localizer["And"]));
                                filt.Messages(msg => msg.Or(Localizer["Or"]));
                                filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                                filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                                filt.Messages(msg => msg.Filter(Localizer["Search"]));
                                filt.Messages(msg => msg.Info(""));

                                filt.Operators(op => op.ForDate(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.IsNotEqualTo(Localizer["Equal"]);
                                    fs.IsEqualTo(Localizer["Not Equal"]);
                                    fs.IsLessThan(Localizer["Smaller"]);
                                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                                    fs.IsGreaterThan(Localizer["Greater"]);
                                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                                }
                                )
                                );

                                filt.Operators(op => op.ForString(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.StartsWith(Localizer["Starts with"]);
                                    fs.EndsWith(Localizer["Ends with"]);
                                    fs.Contains(Localizer["Contains"]);
                                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                                    fs.IsEqualTo(Localizer["Equal"]);
                                    fs.DoesNotContain(Localizer["Does not Contain"]);

                                }
                                )
                                );


                                filt.Operators(op => op.ForNumber(
                                fs =>
                                {
                                    fs.Clear();
                                    fs.IsNotEqualTo(Localizer["Not Equal"]);
                                    fs.IsEqualTo(Localizer["Equal"]);

                                    fs.IsLessThan(Localizer["Smaller"]);
                                    fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                                    fs.IsGreaterThan(Localizer["Greater"]);
                                    fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                                }
                                )
                                );



                            })
                            .Scrollable()
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))
                

                .Read(read => read.Action("Read_CenterMedicineUnit", "CenterMedicine", new { area = "CenterAdmin" }).Type(HttpVerbs.Get)) 

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_CenterMedicineUnit", "CenterMedicine");
                })

                .Create(create =>
                {
                    create.Action("Create_CenterMedicineUnit", "CenterMedicine", new { area = "CenterAdmin" }).Data("AdditionalData");
                })

                .Update(update =>
                {
                    update.Action("Update_CenterMedicineUnit", "CenterMedicine");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>

        <hr />
        <br />

        <button type="submit" class="form-control addCtrl"> @Localizer["Save"]</button>

    </div>


</form>

<script>

        function AdditionalData() {
            return {
                id: $("#Id__").val()
            };
        }

</script>