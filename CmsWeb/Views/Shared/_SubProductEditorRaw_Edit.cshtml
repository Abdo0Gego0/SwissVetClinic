

<form asp-action="Edit_SubProductFromEdit" id="myForm44" asp-controller="CenterProducts" method="post" enctype='multipart/form-data'>

    <div class="container">
        <h1 class="LoginTitle">@Localizer["Item Details"]</h1>
    </div>
    <hr />

    <input name="Id__" id="Id__" hidden />
    <input name="ProductId_" id="ProductId_" hidden />


    <div class="demo-section k-content wide">
        <div class="wrapper">
            <div id="products1"></div>
            <div class="dropZoneElement1">
                <div class="textWrapper">
                    <p><span>+</span>Add Image</p>
                    <p class="dropImageHereText">Drop image here to upload</p>
                </div>
            </div>
        </div>
    </div>

    <script type="text/x-kendo-template" id="template1">
        <div class="product1">
            <img id="#= Name.slice(0,Name.indexOf(".")) #" src="/pImages/#= Name #" alt="#: Name # image" /><span><i onclick="removeThisImage('#: Name #')" style="cursor:pointer;color:red; font-size:30px;transform: translate(-19px, -42px)" class="fa fa-trash"></i></span>
        </div>
    </script>

    @(Html.Kendo().Upload()
        .Name("files1")
        .Events(e => e.Select("onSelect1").Remove("onRemove1"))
        .ShowFileList(true)
        .DropZone(".dropZoneElement1")
        .Validation(validation =>
        {
            validation.AllowedExtensions(new string[] { ".jpg", ".jpeg", ".png", ".bmp", ".gif" });
            validation.MinFileSize(500);
        })
        )

    <div class="container">

        <br />
        <div class="row">

            <div class="col-md-4 mb-3">
                <label class="fieldLabel">@Localizer["Price"]</label>
                <input type="number" class="form-control fieldInput" style="direction:ltr !important" name="Price_" id="Price_" />
            </div>

            <div class="col-md-4 mb-3">
                <label class="fieldLabel">@Localizer["Quantity"]</label>
                <input type="number" class="form-control fieldInput" style="direction:ltr !important" name="Quantity_" id="Quantity_" />
            </div>



        </div>
        <br />
        <br />
        <hr />
        <br />
        <div class="@Localizer["k-rtl"]">
            @(
                Html.Kendo().Grid<SubproductCharacteristics>()
                .Name("gridSubproductCharacteristics1")
                .ToolBar
                (
                toolbar =>
                {
                    toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
                    toolbar.Search().Text(Localizer["Search"]);

                }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.SubproductCharacteristicsTranslation[0].Description).Title("Description");
                    columns.Bound(p => p.SubproductCharacteristicsTranslation[1].Description).Title("الوصف");

                    columns.Command(command =>
                    {
                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250).Title(" ");
                }

                )
                .Mobile(MobileMode.Auto)


                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
                .Scrollable()
                .Editable(ed =>
                {
                    ed.Mode(GridEditMode.InCell);

                    ed.DisplayDeleteConfirmation(false);
                })

                .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

                .DataSource(
                dataSource => dataSource

                .Ajax()
                .Batch(true)
                .PageSize(20)
                .Model(model => model.Id(p => p.Id))

                .Model(model => model.Field(p => p.SubproductCharacteristicsTranslation).DefaultValue(new List<SubproductCharacteristicsTranslation> { new SubproductCharacteristicsTranslation { LangCode = "en-us", Description = "" }, new SubproductCharacteristicsTranslation { LangCode = "ar", Description = "" } }))

                .Read(read => read.Action("Read_SubproductCharacteristics", "CenterProducts", new { area = "CenterAdmin" }).Type(HttpVerbs.Get))

                .Destroy(destroy =>
                {
                    destroy.Action("Destroy_SubproductCharacteristics", "CenterProducts");
                })

                .Create(create =>
                {
                    create.Action("Create_SubproductCharacteristics", "CenterProducts", new { area = "CenterAdmin" });
                })

                .Update(update =>
                {
                    update.Action("Update_SubproductCharacteristics", "CenterProducts");
                })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.DataBound("onDataBound"))
                )
        </div>


        <br />
        <br />
        <br />
        <br />
        <br />
        <hr />

        <button type="button" onclick="submitForm44()" class="form-control addCtrl"> @Localizer["Save"]</button>

    </div>


</form>




<script>

    var imagesToDelete = [];

    function removeThisImage(imageName) {

        if (imagesToDelete.includes(imageName) == false) {
            imagesToDelete.push(imageName);
            jQuery('#' + imageName.slice(0, imageName.indexOf('.'))).css('opacity', '0.3');

        }
        else {
            indexToRemove = imagesToDelete.indexOf(imageName);
            imagesToDelete.splice(indexToRemove, 1);
            jQuery('#' + imageName.slice(0, imageName.indexOf('.'))).css('opacity', '1');


        }

    }


    function submitForm44() {

        var validator = $("#myForm44").kendoValidator().data("kendoValidator");


        var f = document.getElementById("myForm44");


        var formData = [];

        debugger;

        for (var i = 0; i < imagesToDelete.length; i++) {

            var inputItemName = document.createElement("input");
            inputItemName.type = "hidden";
            inputItemName.name = "imagesToDelete[" + i + "]";
            inputItemName.value = imagesToDelete[i];
            f.appendChild(inputItemName);
            debugger;

        }

        if (validator.validate()) {
            $("#myForm44").submit();
        }

    }


    $(document).ready(function () {




        // var initialFiles = [{ name: "1.jpg" }, { name: "2.jpg" }, { name: "3.jpg" }, { name: "4.jpg" }, { name: "5.jpg" }, { name: "6.jpg" }];

        // $("#products1").html(kendo.render(template, initialFiles));
    });

    function onSelect1(e) {
        // if (e.operation == "upload")
        {
            for (var i = 0; i < e.files.length; i++) {
                var file = e.files[i].rawFile;
                var uid = e.files[i].uid;
                if (file) {
                    var reader = new FileReader();

                    reader.onloadend = function () {
                        $("<div class='product1' id=" + uid + " ><img src=" + this.result + "  /></div>").appendTo($("#products1"));
                    };

                    reader.readAsDataURL(file);
                }
            }
        }
    }

    function onRemove1(e) {
        debugger;
        $("#" + e.files[0].uid).remove();
    }



</script>
<style>
    .dropZoneElement1 {
        position: relative;
        display: inline-block;
        background-color: #f8f8f8;
        border: 1px solid #c7c7c7;
        width: 230px;
        height: 110px;
        text-align: center;
    }

    .textWrapper {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 100%;
        font-size: 24px;
        line-height: 1.2em;
        font-family: Arial,Helvetica,sans-serif;
        color: #000;
    }

    .dropImageHereText {
        color: #c7c7c7;
        text-transform: uppercase;
        font-size: 12px;
    }

    .product1 {
        float: left;
        position: relative;
        margin: 0 10px 10px 0;
        padding: 0;
    }

        .product1 img {
            width: 110px;
            height: 110px;
        }

    .wrapper:after {
        content: ".";
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
    }
</style>