
@model PetOwner

@inject ISelectListService slSrvc

<center>
    <h3 class="text-danger">@ViewBag.ErrorMessage</h3>
</center>



<center>
    <h4>@Localizer["Patient number:"]  &nbsp; @Model.GeneralNumber</h4>

</center>

@{
    string taskFilesName = Model.Id.ToString().Replace("-", "");
}

@(Html.Kendo().Window()
    .Visible(false)
    .Name("windowPatientFiles")
    .Title(Localizer["Patient Files"])
    .Content(Localizer["loading..."])
    .LoadContentFrom("windowPatientFiles", "Patient", new { area = "Doctor", id = Model.Id })
    .HtmlAttributes(new { @style = "box-shadow:0px 0px 204px 20px" })

    .Draggable()
.Resizable()
.Width(800)
.Actions(actions => actions.Pin().Minimize().Maximize().Close())
    .Resizable()
)



<script>

    function openPatientFiles() {
        $("#windowPatientFiles").data("kendoWindow").open();

    }


    function onOpen(e) {

        var class1 = document.getElementsByClassName('.k-dialog');
        var class2 = document.getElementsByClassName('.k-overlay');

        for (var i = 0; i < class1.length; i += 1) {
            class1[i].style.display = 'block';
        }

        for (var i = 0; i < class2.length; i += 1) {
            class2[i].style.display = 'block';
        }



        if (e.entry.extension == ".png" || e.entry.extension == ".jpg" || e.entry.extension == ".jpeg" || e.entry.extension == ".tif") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }


            $("#imagePreview").attr("src", "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension);
            $("#window").data("kendoWindow").center().open();
        }

        if (e.entry.extension == ".pdf") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }


            var pdfViewer = $("#pdfviewer").data("kendoPDFViewer");
            var fp = "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension;
            pdfViewer.fromFile(fp);
            $("#windowPdf").data("kendoWindow").center().open();

        }

        if (e.entry.extension == ".mp4") {

            var relPath = '';

            for (var i = 1; i < e.sender.breadcrumb._segments.length; i++) {
                relPath = relPath + '/' + e.sender.breadcrumb._segments[i].text
            }

            var $video = $('#videoPreview video'),
                videoSrc = $('source', $video).attr('src', "/visit/@taskFilesName" + relPath + '/' + e.entry.name + e.entry.extension);
            $video[0].load();
            $video[0].play();

            $("#windowVideo").data("kendoWindow").center().open();

        }

    }

</script>



<kendo-expansionpanel name="sub0" 
                      title="@Localizer["Patient Personal Info"]"
                      sub-title="" expanded="true" 
on-expand="onExpand" on-collapse="onCollapse" on-complete="onComplete">
    <content>
<form asp-action="Edit_Patient" asp-controller="Patient" method="post" id="myForm" enctype='multipart/form-data'>

    <div class="container">


        <input asp-for="ImageName" hidden>
        <input asp-for="MedicalCenterId" hidden>
        <input asp-for="Id" hidden>

        <center>

        @{
            if (!string.IsNullOrEmpty(Model.ImageName))
            {
                <div onclick="document.getElementById('ImageFile').click()" class="picCircle" id="prevImg1" style="cursor:pointer;background-image:url(@Model.ImageFullPath) !important">
                </div>
            }
            else
            {
                <div onclick="document.getElementById('ImageFile').click()" class="picCircle" id="prevImg1" style="cursor:pointer;">
                </div>
            }
        }

            <div>
                <span>
                    <i style="background-image:url('/AdminDashboard/images/gallery-export.svg');display: inline-block;width:24px;height:24px"></i>
                    <span class="uploadPicture"
                          onclick="document.getElementById('ImageFile').click()">
                                @Localizer["ChooseImage"]
                    </span>
                </span>
                <input type="file" id="ImageFile" onchange="preview()" accept="image/*" style="display:none" name="ImageFile">
            </div>
        </center>

    <hr />

                <p class="text-center mb-6">
                    @Localizer["patientInfo"]
                </p>

        <div class="row">
            <div class="col-md-4 mb-3">
                <label class="fieldLabel" asp-for="FirstName"></label>
                <input class="form-control fieldInput" asp-for="FirstName" />
                <span class="text-danger" asp-validation-for="FirstName"></span>

            </div>

            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="MiddleName"></label>
                <input class="form-control fieldInput" asp-for="MiddleName"  />
                <span class="text-danger" asp-validation-for="MiddleName"></span>

            </div>

            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="LastName"></label>
                <input class="form-control fieldInput" asp-for="LastName"  />
                <span class="text-danger" asp-validation-for="LastName"></span>

            </div>

            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="MotherName"></label>
                <input class="form-control fieldInput" asp-for="MotherName" />
                <span class="text-danger" asp-validation-for="MotherName"></span>

            </div>

            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="NationalCardId"></label>
                <input class="form-control fieldInput" asp-for="NationalCardId"  />
                <span class="text-danger" asp-validation-for="NationalCardId"></span>

            </div>


            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="Nationality"></label>
                <input class="form-control fieldInput" asp-for="Nationality"  />

            </div>

            <div class="col-md-4">
                <label class="fieldLabel" asp-for="PassportNumber"></label>
                <input class="form-control fieldInput" asp-for="PassportNumber"  />

            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="fieldLabel" asp-for="BloodType"></label>
                    <select required class="form-control" asp-for="BloodType" asp-items="@slSrvc.BloodTypeSL()">
                        <option >Select blood type</option>
                    </select>
                </div>
            </div>

        </div>


        <hr />

                @Html.Hidden("PreviousEmail", Model.PersonEmail)
                @Html.Hidden("PreviousUsername", Model.PersonUserName)

                <p class="text-center mb-6">
                    @Localizer["accountInfo"]
                </p>
        <div class="row">
            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="PersonEmail"></label>
                <input class="form-control fieldInput" asp-for="PersonEmail" />
                <span class="text-danger" asp-validation-for="PersonEmail"></span>
            </div>
            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="PersonPhone"></label>
                <input class="form-control fieldInput" asp-for="PersonPhone" />
                <span class="text-danger" asp-validation-for="PersonPhone"></span>
            </div>

            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="PersonUserName"></label>
                <input class="form-control fieldInput" asp-for="PersonUserName" />
                <span class="text-danger" asp-validation-for="PersonUserName"></span>
            </div>

            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="Password"></label>
                <input class="form-control fieldInput" asp-for="Password" value="@ViewBag.Password" />
                <span class="text-danger" asp-validation-for="Password"></span>
            </div>

        </div>


        <hr />

                <p class="text-center mb-6">
                    @Localizer["Insurance Info"]
                </p>
        <div class="row">
            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="InsuranceId"></label>
                <input class="form-control fieldInput" asp-for="InsuranceId" />
                <span class="text-danger" asp-validation-for="InsuranceId"></span>
            </div>
            <div class="col-md-4  mb-3">
                <label class="fieldLabel" asp-for="InsuranceCompany"></label>
                <input class="form-control fieldInput" asp-for="InsuranceCompany" />
                <span class="text-danger" asp-validation-for="InsuranceCompany"></span>
            </div>

        </div>


        <hr />


            <br />
            <br />
            <br />
        @* <button type="submit" class="form-control addCtrl"> @Localizer["Edit"]</button> *@

    </div>


</form>

    </content>

</kendo-expansionpanel>

<script>
    function preview(evt) {
        var filee = event.target.files[0];
        document.getElementById('prevImg').style.backgroundImage = "url('" + URL.createObjectURL(filee) + "')";
    }
</script>

<br />

<kendo-expansionpanel name="sub11" title="@Localizer["Patient Old Visits"]" sub-title="" expanded="false" on-expand="onExpand" on-collapse="onCollapse" on-complete="onComplete">
    <content>

        <div id="teammates" class="widget">
            <div>
                <div class="team-mate" style="cursor:pointer" onclick="openPatientFiles()">
                    <h4>@Localizer["Open patient files"] &nbsp;&nbsp; <i class="fas fa-folder-open"></i></h4>
                </div>

            </div>
        </div>

        <br />
        <br />
        
            <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientVisit>()
            .Name("gridVisists")
            .ToolBar
            (
            toolbar =>
            {

                @*                 toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
        toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
        toolbar.Search().Text(Localizer["Search"]); *@
            }).HtmlAttributes(new { @class = "myToolBar" })


            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.VisistDate);
                columns.ForeignKey(p => p.BaseClinicId, slSrvc.ClinicsSL());
                columns.ForeignKey(p => p.DoctorId, slSrvc.DoctorSL());

                columns.Command(command =>
                {
                    command.Custom("myEdit").Text(@"<span class='myEditStyle'>
        <i class='fa fa-eye'></i>
        </span>").Click("openPreviousVisit");

                }).Width(250);


            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.PopUp).TemplateName("DoctorVisitPopUp");

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Read(read => read.Action("PatientVisit_Read", "Patient", new { area = "Doctor", id = @Model.Id }).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientVisit", "Patient");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_PatientVisit", "Patient", new { area = "Doctor", id = @Model.Id });
            })

            .Update(destroy =>
            {
                destroy.Action("Update_PatientVisit", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>
    </content>
</kendo-expansionpanel>




<br />


<kendo-expansionpanel name="sub1"
                      title="@Localizer["Patient Allergy"]"
sub-title="" expanded="false" on-expand="onExpand" on-collapse="onCollapse" on-complete="onComplete">
    <content>
        <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientAllergy>()
            .Name("gridAllergy")
            .ToolBar
            (
            toolbar =>
            {

@*                 toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" }); *@
                toolbar.Search().Text(Localizer["Search"]);
            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Read(read => read.Action("PatientAllergy_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientAllergy", "Patient");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_PatientAllergy", "Patient", new { id = @Model.Id });
            })

            .Update(destroy =>
            {
                destroy.Action("Update_PatientAllergy", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>
    </content>
</kendo-expansionpanel>




<br />

<kendo-expansionpanel name="sub2"
                      title=" @Localizer["Patient Family History"]"
                      sub-title="" expanded="false" on-expand="onExpand" on-collapse="onCollapse" on-complete="onComplete">
    <content>
        <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientFamilyHistory>()
            .Name("PatientFamilyHistory")
            .ToolBar
            (
            toolbar =>
            {

@*                 toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" }); *@
                toolbar.Search().Text(Localizer["Search"]);
            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Read(read => read.Action("PatientFamilyHistory_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientFamilyHistory", "Patient");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_PatientFamilyHistory", "Patient", new { id = @Model.Id });
            })

            .Update(destroy =>
            {
                destroy.Action("Update_PatientFamilyHistory", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>
    </content>
</kendo-expansionpanel>


<br />

<kendo-expansionpanel name="sub3"
                      title=" @Localizer["Patient Medical History"]"
                      sub-title="" expanded="false" on-expand="onExpand" on-collapse="onCollapse" on-complete="onComplete">
    <content>
        <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientMedicalHistory>()
            .Name("PatientMedicalHistory")
            .ToolBar
            (
            toolbar =>
            {

@*                 toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" }); *@
                toolbar.Search().Text(Localizer["Search"]);
            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Read(read => read.Action("PatientMedicalHistory_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientMedicalHistory", "Patient");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_PatientMedicalHistory", "Patient", new { id = @Model.Id });
            })

            .Update(destroy =>
            {
                destroy.Action("Update_PatientMedicalHistory", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>
    </content>
</kendo-expansionpanel>


<br />

<kendo-expansionpanel name="sub4"
                      title=" @Localizer["Patient Medicine History"]" sub-title="" expanded="false" on-expand="onExpand" on-collapse="onCollapse" on-complete="onComplete">
    <content>
        <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientMedicineHistory>()
            .Name("PatientMedicineHistory")
            .ToolBar
            (
            toolbar =>
            {
@* 
                toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" }); *@
                toolbar.Search().Text(Localizer["Search"]);
            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Read(read => read.Action("PatientMedicineHistory_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientMedicineHistory", "Patient");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_PatientMedicineHistory", "Patient", new { id = @Model.Id });
            })

            .Update(destroy =>
            {
                destroy.Action("Update_PatientMedicineHistory", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>
    </content>
</kendo-expansionpanel>



<br />

<kendo-expansionpanel name="sub5"
                      title=" @Localizer["Patient Surgical History"]" sub-title="" expanded="false" on-expand="onExpand" on-collapse="onCollapse" on-complete="onComplete">
    <content>
        <div class="@Localizer["k-rtl"]">
        @(
            Html.Kendo().Grid<PatientSurgicalHistory>()
            .Name("PatientSurgicalHistory")
            .ToolBar
            (
            toolbar =>
            {

@*                 toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl" });
                toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" }); *@
                toolbar.Search().Text(Localizer["Search"]);
            }).HtmlAttributes(new { @class = "myToolBar" })

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Visible(false);
                columns.Bound(p => p.value);

                columns.Command(command =>
                {
                    command.Destroy().TemplateId("Temp_Destroy");
                }).Width(250).Title(" ");
            }

            )
            .Mobile(MobileMode.Auto)
            .Editable(ed =>
            {
                ed.Mode(GridEditMode.InCell);

                ed.DisplayDeleteConfirmation(false);
            })

            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(25)
            .Responsive(true)
            .Info(true)
            .Numeric(true)
            )
            .Sortable()
            .Navigatable()
            .Resizable(r => r.Columns(true))
            .Reorderable(r => r.Columns(true))
                .Filterable(filt =>
                {
                    filt.Messages(msg => msg.And(Localizer["And"]));
                    filt.Messages(msg => msg.Or(Localizer["Or"]));
                    filt.Messages(msg => msg.Equals(Localizer["Equal"]));
                    filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
                    filt.Messages(msg => msg.Filter(Localizer["Search"]));
                    filt.Messages(msg => msg.Info(""));

                    filt.Operators(op => op.ForDate(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Equal"]);
                        fs.IsEqualTo(Localizer["Not Equal"]);
                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
                    }
                    )
                    );

                    filt.Operators(op => op.ForString(
                    fs =>
                    {
                        fs.Clear();
                        fs.StartsWith(Localizer["Starts with"]);
                        fs.EndsWith(Localizer["Ends with"]);
                        fs.Contains(Localizer["Contains"]);
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);
                        fs.DoesNotContain(Localizer["Does not Contain"]);

                    }
                    )
                    );


                    filt.Operators(op => op.ForNumber(
                    fs =>
                    {
                        fs.Clear();
                        fs.IsNotEqualTo(Localizer["Not Equal"]);
                        fs.IsEqualTo(Localizer["Equal"]);

                        fs.IsLessThan(Localizer["Smaller"]);
                        fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                        fs.IsGreaterThan(Localizer["Greater"]);
                        fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

                    }
                    )
                    );



                })
            .Scrollable()


            .HtmlAttributes(new { @class = "custom-grid", @style = "height:350px" }) // Add a custom class

            .DataSource(
            dataSource => dataSource

            .Ajax()
            .Batch(true)
            .PageSize(20)
            .Model(model => model.Id(p => p.Id))
            .Read(read => read.Action("PatientSurgicalHistory_Read", "Patient", new { id = @Model.Id }).Type(HttpVerbs.Get))

            .Destroy(destroy =>
            {
                destroy.Action("Destroy_PatientSurgicalHistory", "Patient");
            })


            .Create(destroy =>
            {
                destroy.Action("Create_PatientSurgicalHistory", "Patient", new { id = @Model.Id });
            })

            .Update(destroy =>
            {
                destroy.Action("Update_PatientSurgicalHistory", "Patient");
            })

            .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

            )
            @*.Events(events => events.Edit("onEdit"))*@
            .Events(events => events.DataBound("onDataBound"))
            )
        </div>
    </content>
</kendo-expansionpanel>

<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>
<script>

    function onExpand() {
        //kendoConsole.log("Expand");
    };

    function onCollapse() {
        //kendoConsole.log("Collapse");
    };

    function onComplete() {
        //kendoConsole.log("Complete");
    };
</script>
