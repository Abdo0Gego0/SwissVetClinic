@inject ISelectListService selectSrvc

<br />

<div class="container">
    <div class="row">
        <div class="col-md-6  mb-3">
            <label class="fieldLabel">@Localizer["Choose Center"] *</label>
            <select class="form-select" name="MedicalCenterId" id="MedicalCenterId" asp-items="@selectSrvc.CentersSL()">
                <option value="" selected> @Localizer["Choose Center"]</option>
            </select>
        </div>
        <div class="col-md-6  mb-3">
            <label class="fieldLabel">@Localizer["Payment Status"]</label>
                <select class="form-select" name="Paid" id="Paid" asp-items="@selectSrvc.PaidSL()">
                    <option value="" selected></option>
                </select>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="fieldLabel">@Localizer["From"]</label>

            @(Html.Kendo().DateTimePicker()
                .Name("StartDate")
                .Value(DateTime.Now)
                .HtmlAttributes(new { style = "width: 100%", title = "datetimepicker", @class = "fieldInput", id = "StartDate" })
                .DateInput()
                )

        </div>
        <div class="col-md-6 mb-3">
            <label class="fieldLabel">@Localizer["To"]</label>

            @(Html.Kendo().DateTimePicker()
                .Name("EndDate")
                .Value(DateTime.Now)
                .HtmlAttributes(new { style = "width: 100%", title = "datetimepicker", @class = "fieldInput", id = "EndDate" })
                .DateInput()
                )
        </div>
    </div>

    <div class="row">
        <div class="col-md-6  mb-3">
            <button type="button" class="form-control addCtrl" onclick="filterResult()"> @Localizer["Show"]</button>
        </div>
        <div class="col-md-6  mb-3">

        </div>
    </div>

    <br />

    <div class="row">
        <div class="col-md-4">

        </div>

        <div class="col-md-8">

        </div>
    </div>


</div>
<div class="container" id="accountDetails" style="display:none">
    <hr />
    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="fieldLabel">@Localizer["Paid"]</label>
            <input  id="paidNumber" class="form-control"/>
        </div>

        <div class="col-md-6 mb-3">
            <label class="fieldLabel">@Localizer["NotPaid"]</label>
            <input id="notPaidNumber" class="form-control" />

        </div>

    </div>
    <br />

    <div class="row"> 
        <div class="col-md-6 mb-3">
            <button type="button" class="form-control addCtrl" onclick="payDialog()"> @Localizer["MarkAsPaid"]</button>
        </div>
    </div>


</div>


<br />

<div class="@Localizer["k-rtl"]">

@(
Html.Kendo().Grid<PetOwner>()
                                        .Name("grid")
        .ToolBar
        (
        toolbar =>
        {
            @* toolbar.Create().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl", onclick = "Create_Patient()" }); *@
@*             toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
            toolbar.Search().Text(Localizer["Search"]); *@
        }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.GeneralNumber).Title("#").Width(120).Filterable(true);
                    columns.Bound(p => p.FullName).Filterable(true);
                    columns.Bound(p => p.CreateDate).Filterable(true);
                    columns.ForeignKey(p => p.MedicalCenterId, selectSrvc.CentersSL()).Filterable(true);
            @* columns.ForeignKey(p => p.IsPaid, selectSrvc.PaidAsBoolSL()).Filterable(true); *@

                    

@*                     columns.Command(command =>
                    {
                        command.Custom("myEdit").Text(@"<span class='myEditStyle'>
    <i class='fa fa-pencil'></i>
    </span>").Click("goEditPatientBySysAdmin");

                    }).Width(250); *@
                }

                    )
                .Mobile(MobileMode.Auto)

                        .Editable(ed =>
        {
            ed.Mode(GridEditMode.PopUp); ed.DisplayDeleteConfirmation(true);

            ed.DisplayDeleteConfirmation(Localizer["patientDelete"]);


        })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

                .DataSource(
        dataSource => dataSource

        .Ajax()
        @* .Batch(true) *@
        .PageSize(20)
        .Model(model => model.Id(p => p.Id))
        .Model(model => model.Field(p => p.MedicalCenterId))
        .Read(read => read.Action("Read_Patient", "Accounting").Type(HttpVerbs.Get))

        .Destroy(destroy =>
        {
            destroy.Action("Destroy_Patient", "Accounting");
        })


         .Create(destroy =>
        {
            destroy.Action("Create_Patient", "Accounting");
        }) 

        .Update(destroy =>
        {
            destroy.Action("Edit_Patient", "Accounting");
        })

        .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

        )
        @*.Events(events => events.Edit("onEdit"))*@
        .Events(events => events.DataBound("onDataBound1"))
)

</div>

<script>

    function filterResult() { 

        var gridDataSource = $("#grid").data("kendoGrid").dataSource;
        

        gridDataSource.transport.options.read.data = {
            MedicalCenterId: $("#MedicalCenterId").val(),
            Paid: $("#Paid").val(),
            StartDate: $("#StartDate").val(),
            EndDate: $("#EndDate").val()
        };
        gridDataSource.read();


    }

    var countPaid = 0;
    var countUnPaid = 0;

    function onDataBound1(e) {

        countPaid = 0;
        countUnPaid = 0;

        var grid = this;
        grid.table.find("tr").each(function () {
            var dataItem = grid.dataItem(this);

            if (dataItem.IsPaid) {
                countPaid = countPaid + 1;
            }
            else { 
                countUnPaid = countUnPaid + 1;
            }

            showAcccountDetails();


        });
    }

    function showAcccountDetails()
    {
        $("#accountDetails").show();
        $("#paidNumber").val(countPaid);
        $("#notPaidNumber").val(countUnPaid);
    }



    function decodeHTMLEntities(text) {
        var textArea = document.createElement('textarea');
        textArea.innerHTML = text;
        return textArea.value;
    }
    
    var PatientToPay = [];

    function payDialog() {
        var gridDataSource = $("#grid").data("kendoGrid").dataSource;

        TotalToPay = 0;
        PatientToPay = [];

        for (var i = 0; i < gridDataSource._pristineData.length; i++) {
            if (gridDataSource._pristineData[i].IsPaid == 0) { 
                TotalToPay = TotalToPay + 1;
                PatientToPay.push(gridDataSource._pristineData[i].Id);
            }
        }

        var msg = '@Localizer["Pay for"].Value' + ' :' + TotalToPay.toString() + ' ' + '@Localizer["Patients"].Value';

        var encodedText = msg;
        var decodedText = decodeHTMLEntities(encodedText);
        let result = confirm(decodedText);

        if (result === true) {
            pay();
        }

        

    }

    function pay(){

        $.ajax({
            url: '/Admin/Accounting/MarkAsPaid',  // Replace with your controller and action
            method: 'POST',  // or 'POST' depending on your server-side logic
            data: { patientsId: PatientToPay },
            success: function (data) {
                alert(data.Value)
            },
            error: function () {
            }
        });



    }


</script>


<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>
