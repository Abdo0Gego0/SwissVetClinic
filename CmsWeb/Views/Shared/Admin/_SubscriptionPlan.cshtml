
<div class="@Localizer["k-rtl"]">
@(
Html.Kendo().Grid<SubscriptionPlan>()
                                        .Name("grid")
                                        .ToolBar
                                        (
     toolbar =>
     {
         toolbar.Create().HtmlAttributes(new { @class = "addCtrl", onclick = "CreatePlan()" }).Text("Add New Plan");
     })
                .Columns(columns =>
                {

                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.SubscriptionPlanTranslation[0].Name)
                         .ClientTemplate("# if (SubscriptionPlanTranslation.length > 0) { #" +
                             "#= SubscriptionPlanTranslation[0].Description #" +
                             "# } else { #" +
                             "''" +
                         "# } #").Title("Description").Filterable(false);

                    columns.Bound(p => p.SubscriptionPlanTranslation[1].Name)
                        .ClientTemplate("# if (SubscriptionPlanTranslation.length > 0) { #" +
                        "#= SubscriptionPlanTranslation[1].Description #" +
                        "# } else { #" +
                        "''" +
                        "# } #").Title("Description").Filterable(false);

                    columns.Command(command =>
                    {
                        command.Custom("myEdit").Text(@"<span class='myEditStyle'>
    <i class='fa fa-pencil'></i>
    </span>").Click("goEditSubscriptionPlan");

                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250);
                }


                )
                .Mobile(MobileMode.Auto)

                
                        .Editable(ed =>
        {
            ed.Mode(GridEditMode.InLine); ed.DisplayDeleteConfirmation(true);

            ed.DisplayDeleteConfirmation("Do you want to delete this plan?");


        })


                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

                .DataSource(
                    dataSource => dataSource

                    .Ajax()

.PageSize(20)
                    .Model(model => model.Id(p => p.Id))
                    .Read(read => read.Action("Read", "SubscriptionPlan").Type(HttpVerbs.Get))
                    .Destroy(destroy =>
                    {
                        destroy.Action("Destroy", "SubscriptionPlan");
                    })

                .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

                )
                .Events(events => events.Edit("onEdit"))
                .Events(events => events.DataBound("onDataBound"))
)





</div>


<script>

    function CreatePlan() {
        window.location = '@Url.Action("CreatePlan", "SubscriptionPlan", new { area = "Admin" })';

    }


</script>

<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>



<script>



</script>
