
@inject ISelectListService slctSrvc

<br />
<br />

<div class="@Localizer["k-rtl"]">
@(
Html.Kendo().Grid<COrder>()
        .Name("grid")
        .ToolBar
        (
        toolbar =>
        {
           @*  toolbar.Custom().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl", onclick = "Create_Product()" }); 
             toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
            toolbar.Search().Text(Localizer["Search"]); *@
        }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p =>p.OrderNumber).Title("#");
                    columns.Bound(p =>p.CustomerName);
                    columns.Bound(p =>p.RecipientTelephone);
                    columns.ForeignKey(p =>p.Status,slctSrvc.OrderStatusSL(1));
                    

                    columns.Command(command =>
                    {
                    command.Edit().TemplateId("Temp_Edit");
                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250);
                }

                    )
                .Mobile(MobileMode.Auto)

                        .Editable(ed =>
        {
            ed.Mode(GridEditMode.PopUp)
            .TemplateName("OrderDetails"); 
            ed.DisplayDeleteConfirmation(true);
            

            ed.DisplayDeleteConfirmation("Do you want to delete this doctor?");


        })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

                .DataSource(
        dataSource => dataSource

        .Ajax()
        .PageSize(20)
        .Model(model => model.Id(p => p.Id))
        .Read(read => read.Action("Order_Read", "Orders").Type(HttpVerbs.Get))

        .Destroy(destroy =>
        {
            destroy.Action("Destroy_Patient", "Orders");
        })


         .Create(destroy =>
        {
            destroy.Action("Create_Patient", "Orders");
        }) 

        .Update(destroy =>
        {
            destroy.Action("Order_Update", "Orders");
        })

        .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

        )
        .Events(events => events.Edit("onEditCer"))
        .Events(events => events.DataBound("onDataBound"))
)

</div>




<script>

    function onEditCer(e) {
        e.container.find(".k-grid-update").text("@Html.Raw(Localizer["Save"])");
        e.container.find(".k-grid-cancel").text("@Html.Raw(Localizer["Cancel"])");
        if (!e.model.isNew()) {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["Edit"])");
            $("#Id").val(e.model.Id).trigger("change");
            
        }
        else {
            e.container.kendoWindow("title", "@Html.Raw(Localizer["New"])");
        }
    }

</script>

<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>

<script>
    function additionalData() {
        return {
            id: $("#Id").val()
        };
    }
</script>