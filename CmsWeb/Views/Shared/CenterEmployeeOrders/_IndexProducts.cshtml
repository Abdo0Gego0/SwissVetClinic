
@inject ISelectListService slctSrvc

<div class="@Localizer["k-rtl"]">
@(
Html.Kendo().Grid<Product>()
        .Name("grid")
        .ToolBar
        (
        toolbar =>
        {
             toolbar.Custom().Text(@Localizer["Add new"]).IconClass("k-icon k-i-plus k-button-icon").HtmlAttributes(new { @class = "addCtrl", onclick = "Create_Product()" }); 
@*             toolbar.Save().SaveText(@Localizer["Save"]).CancelText(@Localizer["Cancel"]).IconClass("fa fa-save").HtmlAttributes(new { @class = "addCtrl" });
            toolbar.Search().Text(Localizer["Search"]); *@
        }).HtmlAttributes(new { @class = "myToolBar" })

                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false);
                    columns.Bound(p => p.ProductTranslation[0].Name).Title("Name");
                    columns.Bound(p => p.ProductTranslation[1].Name).Title("الاسم");
            columns.Bound(p => p.IsVisible).ClientTemplateId("Temp_Switch").Width(120)
            .Filterable(filter => filter
            .Messages(message => message
            .IsFalse(Localizer["Not Active"])
            .IsTrue(Localizer["Active_"])
            .Info(Localizer["Status"])
            )
            );
                    columns.Command(command =>

                    {
                        command.Custom("myEdit").Text(@"<span class='myEditStyle'>
    <i class='fa fa-pencil'></i>
    </span>").Click("goEditProduct");

                        command.Destroy().TemplateId("Temp_Destroy");
                    }).Width(250);
                }

                    )
                .Mobile(MobileMode.Auto)

                        .Editable(ed =>
        {
            ed.Mode(GridEditMode.PopUp); ed.DisplayDeleteConfirmation(true);

            ed.DisplayDeleteConfirmation(Localizer["Do you want to delete this item?"]);


        })

                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(25)
                .Responsive(true)
                .Info(true)
                .Numeric(true)
                )
                .Sortable()
                .Navigatable()
                .Resizable(r => r.Columns(true))
                .Reorderable(r => r.Columns(true))
        .Filterable(filt =>
        {
            filt.Messages(msg => msg.And(Localizer["And"]));
            filt.Messages(msg => msg.Or(Localizer["Or"]));
            filt.Messages(msg => msg.Equals(Localizer["Equal"]));
            filt.Messages(msg => msg.Clear(Localizer["Cancel"]));
            filt.Messages(msg => msg.Filter(Localizer["Search"]));
            filt.Messages(msg => msg.Info(""));

            filt.Operators(op => op.ForDate(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Equal"]);
                fs.IsEqualTo(Localizer["Not Equal"]);
                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);
            }
            )
            );

            filt.Operators(op => op.ForString(
            fs =>
            {
                fs.Clear();
                fs.StartsWith(Localizer["Starts with"]);
                fs.EndsWith(Localizer["Ends with"]);
                fs.Contains(Localizer["Contains"]);
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);
                fs.DoesNotContain(Localizer["Does not Contain"]);

            }
            )
            );


            filt.Operators(op => op.ForNumber(
            fs =>
            {
                fs.Clear();
                fs.IsNotEqualTo(Localizer["Not Equal"]);
                fs.IsEqualTo(Localizer["Equal"]);

                fs.IsLessThan(Localizer["Smaller"]);
                fs.IsLessThanOrEqualTo(Localizer["Smaller or Equal"]);
                fs.IsGreaterThan(Localizer["Greater"]);
                fs.IsGreaterThanOrEqualTo(Localizer["Greater or Equal"]);

            }
            )
            );



        })
                .Scrollable()


                .HtmlAttributes(new { @class = "custom-grid" }) // Add a custom class

                .DataSource(
        dataSource => dataSource

        .Ajax()
        @* .Batch(true) *@
        .PageSize(20)
        .Model(model => model.Id(p => p.Id))
        .Read(read => read.Action("Read_Product", "CenterProducts").Type(HttpVerbs.Get))

        .Destroy(destroy =>
        {
            destroy.Action("Destroy_Patient", "CenterProducts");
        })


         .Create(destroy =>
        {
            destroy.Action("Create_Patient", "CenterProducts");
        }) 

        .Update(destroy =>
        {
            destroy.Action("Edit_Patient", "CenterProducts");
        })

        .Events(events => events.Sync("sync_handler").RequestEnd("requestEnd").RequestStart("requestStart"))

        )
        @*.Events(events => events.Edit("onEdit"))*@
        .Events(events => events.DataBound("onDataBound"))
)

</div>
<script>

    function Create_Product() {
        window.location = '@Url.Action("Create_Product", "CenterProducts", new { area = "CenterAdmin" })';
    } 

    function goEditProduct(e) {
        dataItemPay = this.dataItem($(e.currentTarget).closest("tr"));
        transferId = dataItemPay.Id;
        var url = "/CenterAdmin/CenterProducts/Edit_Product/" + transferId;
        var a = document.createElement('a');
        a.href = url;
        a.click();
    }

</script>


<script id="Temp_Destroy" type="text/kendo-tmpl">
    <span class="k-grid-delete" style="font-size:24px;cursor:pointer;color:red"><i class="fa fa-trash"></i></span>
</script>

<script id="Temp_Edit" type="text/kendo-tmpl">
    <span class="k-grid-edit"   style="font-size:24px;cursor:pointer;color:rgba(1, 81, 83, 1)"><i class="fas fa-edit"></i></span>
</script>


<script id="Temp_Switch" type="text/kendo-tmpl">
    # if(IsVisible){#
    @(
                    Html.Kendo().Switch()
                                .Name("switch_#=Id#")
                                .Checked(true)
                                .Width(105)
                                .HtmlAttributes(new { @style = "font-size: 15px;font-weight: normal;" })
                                .Events(ev =>
                                {
                                    ev.Change("function(e) { onChangeStatus('#=Id#', e); }");
                                })
                                .Messages(c => c.Checked(Localizer["Active_"]).Unchecked(Localizer["Not Active"])).ToClientTemplate()
                )
    #}else{#
    @(
                    Html.Kendo().Switch()
                            .Name("switch_#=Id#")
                                    .Width(105)
                                    .HtmlAttributes(new { @style = "font-size: 15px;font-weight: normal;" })

                        .Checked(false)
                            .Events(ev => ev.Change("function(e) { onChangeStatus('#=Id#', e); }"))
                                .Messages(c => c.Checked(Localizer["Active_"]).Unchecked(Localizer["Not Active"])).ToClientTemplate()
                )
    #}#

</script>


<script>
    
    function onChangeStatus(id, e) {

        var newStatus = e.checked;


        $.ajax(
            {
                type: 'POST',
                //contentType: 'application/json; charset=utf-8',
                url: 'ChangeProductStatus',
                data: { Id: id },
                //dataType: 'json',
                success: function (data) {
                    //location.reload();
                    //alert(data.msg);
                    return false;
                },
                error: function (xhr, status, error) {
                    //location.reload();
                    return false;
                }
            });



    }
</script>