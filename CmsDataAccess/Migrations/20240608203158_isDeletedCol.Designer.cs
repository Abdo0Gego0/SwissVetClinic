// <auto-generated />
using System;
using CmsDataAccess.DbModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CmsDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240608203158_isDeletedCol")]
    partial class isDeletedCol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CmsDataAccess.DbModels.AboutUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AboutUs");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.AboutUsTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutUsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutUsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutUsId");

                    b.ToTable("AboutUsTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.AddressTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("AddressTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<Guid>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstVisit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadonly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Notified")
                        .HasColumnType("bit");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecurrenceException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurrenceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurrenceRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.AttendanceTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DayOff")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnteringTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LeavingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonForAbsence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShiftEnteringTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftLeavingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShiftTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AttendanceTable");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BannerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.BaseClinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicSpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShownOnMobile")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscriptionExpired")
                        .HasColumnType("bit");

                    b.Property<double?>("VisitCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("BaseClinic");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.BaseClinicTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseClinicId");

                    b.ToTable("BaseClinicTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.BookingPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AllowedBookingNumberPerday")
                        .HasColumnType("int");

                    b.Property<int?>("MaximunAllowedMissedAppointments")
                        .HasColumnType("int");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BookingPolicy");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CenterServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("CenterServices");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CenterServicesTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterServicesId");

                    b.ToTable("CenterServicesTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CenterSetUpSteps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CenterAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StepNumer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CenterSetUpSteps");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CertificateTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("CertificateTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ClinicRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RatingOwner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClinicRating");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ClinicSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ClinicSpecialty");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ClinicSpecialtyTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicSpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicSpecialtyId");

                    b.ToTable("ClinicSpecialtyTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DocSpecBreakRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DocSpecBreakRelation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DoctorRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RatingOwner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DoctorRating");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DoctorSpeciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpeciality");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DoctorSpecialityTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecialityId");

                    b.ToTable("DoctorSpecialityTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DoctorTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.EmployeeShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShiftTableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EmployeeShift");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.FAQ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.FAQTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FAQId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FAQId");

                    b.ToTable("FAQTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.MedicalCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BlockedByAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTwentyFourHours")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockMyCenter")
                        .HasColumnType("bit");

                    b.Property<bool>("PaidAccountIsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInMobileApplication")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SubscriptionExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SubscriptionExpired")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseEmailVerfication")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("MedicalCenter");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.MedicalCenterRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RatingOwner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MedicalCenterRating");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.MedicalCenterTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("MedicalCenterTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.MySystemConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailHost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseCashPayementForSubscriber")
                        .HasColumnType("bit");

                    b.Property<bool>("UseEmailVerfication")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MySystemConfiguration");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.NotificationPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HoursBeforeAppointment")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SessionVideos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationPolicy");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.OpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("IsTwentyFourHours")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BaseClinicId");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientAllergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PatientAllergy");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientArchivedNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiType")
                        .HasColumnType("int");

                    b.Property<Guid>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatientArchivedNotification");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientDiagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PatientDiagnosis");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientFamilyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PatientFamilyHistory");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientMedicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PatientMedicalHistory");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientMedicineHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PatientMedicineHistory");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientSurgicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PatientSurgicalHistory");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientTherapyGoals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsDone")
                        .HasColumnType("int");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TherapyGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PatientTherapyGoals");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CenterServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Glucose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HearBeat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstVisit")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisistDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatientVisit");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AccountVerfied")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("BlockedByAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("CenterStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyBookFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gendre")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaborCardFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCardId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("VerificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fcm_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PersonNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonNotification");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ProductCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ProductCategoriesTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoriesId");

                    b.ToTable("ProductCategoriesTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ProductTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ShiftTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("ShiftTable");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("SubProduct");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubProductId");

                    b.ToTable("SubProductImage");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubproductCharacteristics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubProductId");

                    b.ToTable("SubproductCharacteristics");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubproductCharacteristicsTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubproductCharacteristicsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubproductCharacteristicsId");

                    b.ToTable("SubproductCharacteristicsTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubscriptionApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Accepted")
                        .HasColumnType("int");

                    b.Property<string>("CenterAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CenterAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailVerfied")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LicenseExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalCardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseFromAdmin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriberEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionApplication");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FreeDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PriceAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("PriceCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceRecuencyInterval")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SetUpCost")
                        .HasColumnType("bigint");

                    b.Property<string>("StripeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlan");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubscriptionPlanTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("SubscriptionPlanTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SystemTimeZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IANAID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemTimeZone");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TermsAndConditions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TermsAndConditionsTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TermsAndConditionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TermsAndConditionsText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TermsAndConditionsId");

                    b.ToTable("TermsAndConditionsTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyGoals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TherapyGoals");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyGoalsTherapyPlan", b =>
                {
                    b.Property<Guid>("TherapyGoalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TherapyPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("TherapyGoalsId", "TherapyPlanId");

                    b.HasIndex("TherapyPlanId");

                    b.ToTable("TherapyGoalsTherapyPlan");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyGoalsTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TherapyGoalsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TherapyGoalsId");

                    b.ToTable("TherapyGoalsTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PatientVideoEveryNumberOfSessions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TherapyPlan");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyPlanTranslations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TherapyPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TherapyPlanId");

                    b.ToTable("TherapyPlanTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.UserResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserResetToken");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ValidQR", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("QRType")
                        .HasColumnType("bit");

                    b.Property<string>("Secretkey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ValidQR");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.VisitMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientVisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientVisitId");

                    b.ToTable("VisitMeasurement");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.VisitTreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientVisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientVisitId");

                    b.ToTable("VisitTreatment");
                });

            modelBuilder.Entity("DoctorDoctorSpeciality", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorId", "DoctorSpecialityId");

                    b.HasIndex("DoctorSpecialityId");

                    b.ToTable("DoctorDoctorSpeciality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CenterAdmin", b =>
                {
                    b.HasBaseType("CmsDataAccess.DbModels.Person");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PaidAccountIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SetUpFeesIsPayed")
                        .HasColumnType("bit");

                    b.Property<string>("StipeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePaymentMethodId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubcriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubscriptionExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SubscriptionExpired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("CenterAdmin", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Doctor", b =>
                {
                    b.HasBaseType("CmsDataAccess.DbModels.Person");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Employee", b =>
                {
                    b.HasBaseType("CmsDataAccess.DbModels.Person");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeRole")
                        .HasColumnType("int");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PetOwner", b =>
                {
                    b.HasBaseType("CmsDataAccess.DbModels.Person");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<int>("GeneralNumber")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PetOwner", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SysAdmin", b =>
                {
                    b.HasBaseType("CmsDataAccess.DbModels.Person");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("SysAdmin", (string)null);
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.AboutUsTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.AboutUs", null)
                        .WithMany("AboutUsTranslation")
                        .HasForeignKey("AboutUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.AddressTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Address", null)
                        .WithMany("AddressTranslation")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.BaseClinicTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.BaseClinic", null)
                        .WithMany("BaseClinicTranslation")
                        .HasForeignKey("BaseClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CenterServicesTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.CenterServices", null)
                        .WithMany("CenterServicesTranslation")
                        .HasForeignKey("CenterServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Certificate", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Doctor", null)
                        .WithMany("Certificate")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CertificateTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Certificate", null)
                        .WithMany("CertificateTranslation")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ClinicSpecialtyTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.ClinicSpecialty", null)
                        .WithMany("ClinicSpecialtyTranslation")
                        .HasForeignKey("ClinicSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ContactInfo", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.MedicalCenter", null)
                        .WithMany("ContactInfo")
                        .HasForeignKey("MedicalCenterId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DoctorSpecialityTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.DoctorSpeciality", null)
                        .WithMany("DoctorSpecialityTranslation")
                        .HasForeignKey("DoctorSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DoctorTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Doctor", null)
                        .WithMany("DoctorTranslation")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.FAQTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.FAQ", null)
                        .WithMany("FAQTranslation")
                        .HasForeignKey("FAQId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.MedicalCenter", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.MedicalCenterTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.MedicalCenter", null)
                        .WithMany("MedicalCenterTranslation")
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.OpeningHours", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.BaseClinic", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("BaseClinicId");

                    b.HasOne("CmsDataAccess.DbModels.MedicalCenter", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("MedicalCenterId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientAllergy", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Pet", null)
                        .WithMany("PatientAllergy")
                        .HasForeignKey("PetId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientDiagnosis", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Pet", null)
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("PetId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientFamilyHistory", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Pet", null)
                        .WithMany("PatientFamilyHistory")
                        .HasForeignKey("PetId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientMedicalHistory", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Pet", null)
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("PetId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientMedicineHistory", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Pet", null)
                        .WithMany("PatientMedicineHistory")
                        .HasForeignKey("PetId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientSurgicalHistory", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Pet", null)
                        .WithMany("PatientSurgicalHistory")
                        .HasForeignKey("PetId");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientTherapyGoals", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Pet", null)
                        .WithMany("PatientTherapyGoals")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Person", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ProductCategoriesTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.ProductCategories", null)
                        .WithMany("ProductCategoriesTranslation")
                        .HasForeignKey("ProductCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ProductTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Product", null)
                        .WithMany("ProductTranslation")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubProduct", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Product", null)
                        .WithMany("SubProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubProductImage", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.SubProduct", null)
                        .WithMany("SubProductImage")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubproductCharacteristics", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.SubProduct", null)
                        .WithMany("SubproductCharacteristics")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubproductCharacteristicsTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.SubproductCharacteristics", null)
                        .WithMany("SubproductCharacteristicsTranslation")
                        .HasForeignKey("SubproductCharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubscriptionPlanTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.SubscriptionPlan", null)
                        .WithMany("SubscriptionPlanTranslation")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TermsAndConditionsTranslation", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.TermsAndConditions", null)
                        .WithMany("TermsAndConditionsTranslation")
                        .HasForeignKey("TermsAndConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyGoalsTherapyPlan", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.TherapyGoals", null)
                        .WithMany()
                        .HasForeignKey("TherapyGoalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsDataAccess.DbModels.TherapyPlan", null)
                        .WithMany()
                        .HasForeignKey("TherapyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyGoalsTranslations", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.TherapyGoals", null)
                        .WithMany("TherapyGoalsTranslations")
                        .HasForeignKey("TherapyGoalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyPlanTranslations", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.TherapyPlan", null)
                        .WithMany("TherapyPlanTranslations")
                        .HasForeignKey("TherapyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.VisitMeasurement", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.PatientVisit", null)
                        .WithMany("VisitMeasurement")
                        .HasForeignKey("PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.VisitTreatment", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.PatientVisit", null)
                        .WithMany("VisitTreatment")
                        .HasForeignKey("PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorDoctorSpeciality", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsDataAccess.DbModels.DoctorSpeciality", null)
                        .WithMany()
                        .HasForeignKey("DoctorSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CenterAdmin", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.DbModels.CenterAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Doctor", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.DbModels.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Employee", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.DbModels.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PetOwner", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.DbModels.PetOwner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SysAdmin", b =>
                {
                    b.HasOne("CmsDataAccess.DbModels.Person", null)
                        .WithOne()
                        .HasForeignKey("CmsDataAccess.DbModels.SysAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.AboutUs", b =>
                {
                    b.Navigation("AboutUsTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Address", b =>
                {
                    b.Navigation("AddressTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.BaseClinic", b =>
                {
                    b.Navigation("BaseClinicTranslation");

                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.CenterServices", b =>
                {
                    b.Navigation("CenterServicesTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Certificate", b =>
                {
                    b.Navigation("CertificateTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ClinicSpecialty", b =>
                {
                    b.Navigation("ClinicSpecialtyTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.DoctorSpeciality", b =>
                {
                    b.Navigation("DoctorSpecialityTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.FAQ", b =>
                {
                    b.Navigation("FAQTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.MedicalCenter", b =>
                {
                    b.Navigation("ContactInfo");

                    b.Navigation("MedicalCenterTranslation");

                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.PatientVisit", b =>
                {
                    b.Navigation("VisitMeasurement");

                    b.Navigation("VisitTreatment");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Pet", b =>
                {
                    b.Navigation("PatientAllergy");

                    b.Navigation("PatientDiagnosis");

                    b.Navigation("PatientFamilyHistory");

                    b.Navigation("PatientMedicalHistory");

                    b.Navigation("PatientMedicineHistory");

                    b.Navigation("PatientSurgicalHistory");

                    b.Navigation("PatientTherapyGoals");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Product", b =>
                {
                    b.Navigation("ProductTranslation");

                    b.Navigation("SubProduct");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.ProductCategories", b =>
                {
                    b.Navigation("ProductCategoriesTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubProduct", b =>
                {
                    b.Navigation("SubProductImage");

                    b.Navigation("SubproductCharacteristics");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubproductCharacteristics", b =>
                {
                    b.Navigation("SubproductCharacteristicsTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.SubscriptionPlan", b =>
                {
                    b.Navigation("SubscriptionPlanTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TermsAndConditions", b =>
                {
                    b.Navigation("TermsAndConditionsTranslation");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyGoals", b =>
                {
                    b.Navigation("TherapyGoalsTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.TherapyPlan", b =>
                {
                    b.Navigation("TherapyPlanTranslations");
                });

            modelBuilder.Entity("CmsDataAccess.DbModels.Doctor", b =>
                {
                    b.Navigation("Certificate");

                    b.Navigation("DoctorTranslation");
                });
#pragma warning restore 612, 618
        }
    }
}
